// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package license

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// LicenseMetaData contains all meta data concerning the License contract.
var LicenseMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_valistRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_trustedForwarder\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_teamName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_projectName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_licenseName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_mintPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_licenseID\",\"type\":\"uint256\"}],\"name\":\"LicenseCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_teamName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_projectName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_licenseName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_licenseID\",\"type\":\"uint256\"}],\"name\":\"LicenseMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_teamName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_projectName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_licenseName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_metaURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_mintPrice\",\"type\":\"uint256\"}],\"name\":\"createLicense\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_licenseName\",\"type\":\"string\"}],\"name\":\"getLicenseID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_teamName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_projectName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_licenseName\",\"type\":\"string\"}],\"name\":\"getLicenseMetaURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_teamName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_projectName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_page\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"}],\"name\":\"getNamesByProjectID\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"metaByID\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_teamName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_projectName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_licenseName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"mintLicense\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"priceByID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"versionRecipient\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60c060405260056080819052640322e322e360dc1b60a0908152620000269190816200012f565b50604080518082019091526007808252664c4943454e534560c81b602090920191825262000057916006916200012f565b506040805180820190915260108082526f536f667477617265204c6963656e736560801b602090920191825262000091916007916200012f565b503480156200009f57600080fd5b5060405162002f7438038062002f74833981016040819052620000c291620001f2565b6040805160208101909152600081528190620000de8162000116565b50600380546001600160a01b039283166001600160a01b03199182161790915560048054949092169316929092179091555062000266565b80516200012b9060029060208401906200012f565b5050565b8280546200013d9062000229565b90600052602060002090601f016020900481019282620001615760008555620001ac565b82601f106200017c57805160ff1916838001178555620001ac565b82800160010185558215620001ac579182015b82811115620001ac5782518255916020019190600101906200018f565b50620001ba929150620001be565b5090565b5b80821115620001ba5760008155600101620001bf565b80516001600160a01b0381168114620001ed57600080fd5b919050565b6000806040838503121562000205578182fd5b6200021083620001d5565b91506200022060208401620001d5565b90509250929050565b600181811c908216806200023e57607f821691505b602082108114156200026057634e487b7160e01b600052602260045260246000fd5b50919050565b612cfe80620002766000396000f3fe6080604052600436106101135760003560e01c8063572b6c05116100a0578063a22cb46511610064578063a22cb46514610305578063dab344f814610325578063e985e9c514610345578063f242432a1461038e578063fc84f13f146103ae57600080fd5b8063572b6c051461026157806363962d481461029057806367e9a744146102bd5780636a0ccb42146102d057806395d89b41146102f057600080fd5b80632eb2c2d6116100e75780632eb2c2d6146101bd57806343417c06146101df578063486ff0cd146101ff578063490693bf146102145780634e1273f41461023457600080fd5b8062fdd58e1461011857806301ffc9a71461014b57806306fdde031461017b5780630e89341c1461019d575b600080fd5b34801561012457600080fd5b506101386101333660046121b3565b6103db565b6040519081526020015b60405180910390f35b34801561015757600080fd5b5061016b6101663660046122c6565b610472565b6040519015158152602001610142565b34801561018757600080fd5b506101906104c4565b604051610142919061289e565b3480156101a957600080fd5b506101906101b83660046125b3565b610552565b3480156101c957600080fd5b506101dd6101d8366004612077565b6105bd565b005b3480156101eb57600080fd5b506101906101fa3660046125b3565b610666565b34801561020b57600080fd5b5061019061067f565b34801561022057600080fd5b506101dd61022f366004612494565b61068c565b34801561024057600080fd5b5061025461024f3660046121de565b610bb4565b6040516101429190612866565b34801561026d57600080fd5b5061016b61027c366004612000565b6003546001600160a01b0391821691161490565b34801561029c57600080fd5b506102b06102ab366004612543565b610d15565b6040516101429190612805565b6101dd6102cb3660046123fe565b610fec565b3480156102dc57600080fd5b506101906102eb36600461237b565b611377565b3480156102fc57600080fd5b50610190611597565b34801561031157600080fd5b506101dd610320366004612186565b6115a4565b34801561033157600080fd5b506101386103403660046125e3565b6115ba565b34801561035157600080fd5b5061016b61036036600461203f565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b34801561039a57600080fd5b506101dd6103a9366004612120565b6115f8565b3480156103ba57600080fd5b506101386103c93660046125b3565b60086020526000908152604090205481565b60006001600160a01b03831661044c5760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084015b60405180910390fd5b506000908152602081815260408083206001600160a01b03949094168352929052205490565b60006001600160e01b03198216636cdb3d1360e11b14806104a357506001600160e01b031982166303a24d0760e21b145b806104be57506301ffc9a760e01b6001600160e01b03198316145b92915050565b600780546104d190612b3e565b80601f01602080910402602001604051908101604052809291908181526020018280546104fd90612b3e565b801561054a5780601f1061051f5761010080835404028352916020019161054a565b820191906000526020600020905b81548152906001019060200180831161052d57829003601f168201915b505050505081565b604080518082018252601981527f68747470733a2f2f676174657761792e76616c6973742e696f0000000000000060208083019190915260008481526009825283902092516060936105a69284920161271b565b604051602081830303815290604052915050919050565b6105c5611691565b6001600160a01b0316856001600160a01b031614806105eb57506105eb85610360611691565b6106525760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b6064820152608401610443565b61065f85858585856116c4565b5050505050565b600960205260009081526040902080546104d190612b3e565b600580546104d190612b3e565b60008251116106ce5760405162461bcd60e51b815260206004820152600e60248201526d6572722d656d7074792d6d65746160901b6044820152606401610443565b60008551116106ef5760405162461bcd60e51b815260040161044390612a2d565b60008451116107105760405162461bcd60e51b815260040161044390612a2d565b60008351116107315760405162461bcd60e51b815260040161044390612a2d565b6004805460405163f8b2491560e01b81526000926001600160a01b039092169163f8b2491591610763918a910161289e565b60206040518083038186803b15801561077b57600080fd5b505afa15801561078f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b391906125cb565b60048054604051632c7b800360e11b81529293506000926001600160a01b03909116916358f70006916107ea9186918b9101612a55565b60206040518083038186803b15801561080257600080fd5b505afa158015610816573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083a91906125cb565b9050600061084882876115ba565b600081815260096020526040902080549192509061086590612b3e565b1590506108a85760405162461bcd60e51b8152602060048201526011602482015270195c9c8b5b1a58d95b9cd94b595e1a5cdd607a1b6044820152606401610443565b6004546001600160a01b03166301738281846108c2611691565b6040516001600160e01b031960e085901b16815260048101929092526001600160a01b0316602482015260440160206040518083038186803b15801561090757600080fd5b505afa15801561091b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093f91906122aa565b61097d5760405162461bcd60e51b815260206004820152600f60248201526e32b93916ba32b0b696b6b2b6b132b960891b6044820152606401610443565b600480546040516321a0be0360e11b81529182018490526000916001600160a01b03909116906343417c069060240160006040518083038186803b1580156109c457600080fd5b505afa1580156109d8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a0091908101906122fe565b5111610a435760405162461bcd60e51b8152602060048201526012602482015271195c9c8b5c1c9bda8b5b9bdd0b595e1a5cdd60721b6044820152606401610443565b6004805460405163d93379d160e01b81529182018590526000916001600160a01b039091169063d93379d19060240160206040518083038186803b158015610a8a57600080fd5b505afa158015610a9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac29190612023565b6001600160a01b03161415610b0e5760405162461bcd60e51b81526020600482015260126024820152716572722d6e6f2d62656e656669636961727960701b6044820152606401610443565b6000818152600860209081526040808320879055600982529091208651610b3792880190611e9c565b506000828152600a6020908152604082208054600181018255908352918190208851610b6a939190910191890190611e9c565b507f0e5932237fa54008b385602dec56e11f77845565e34920db3f9a525b982a31aa8888888785604051610ba2959493929190612908565b60405180910390a15050505050505050565b60608151835114610c195760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152608401610443565b600083516001600160401b03811115610c4257634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610c6b578160200160208202803683370190505b50905060005b8451811015610d0d57610cd2858281518110610c9d57634e487b7160e01b600052603260045260246000fd5b6020026020010151858381518110610cc557634e487b7160e01b600052603260045260246000fd5b60200260200101516103db565b828281518110610cf257634e487b7160e01b600052603260045260246000fd5b6020908102919091010152610d0681612ba5565b9050610c71565b509392505050565b6004805460405163f8b2491560e01b81526060926000926001600160a01b03169163f8b2491591610d48918a910161289e565b60206040518083038186803b158015610d6057600080fd5b505afa158015610d74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d9891906125cb565b60048054604051632c7b800360e11b81529293506000926001600160a01b03909116916358f7000691610dcf9186918b9101612a55565b60206040518083038186803b158015610de757600080fd5b505afa158015610dfb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e1f91906125cb565b90506000610e2d8587612ad8565b90506000610e3b8683612ac0565b6000848152600a6020526040902054909150811115610e6557506000828152600a60205260409020545b6000610e718383612af7565b6001600160401b03811115610e9657634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610ec957816020015b6060815260200190600190039081610eb45790505b509050825b82811015610fde576000858152600a60205260409020805482908110610f0457634e487b7160e01b600052603260045260246000fd5b906000526020600020018054610f1990612b3e565b80601f0160208091040260200160405190810160405280929190818152602001828054610f4590612b3e565b8015610f925780601f10610f6757610100808354040283529160200191610f92565b820191906000526020600020905b815481529060010190602001808311610f7557829003601f168201915b5050505050828583610fa49190612af7565b81518110610fc257634e487b7160e01b600052603260045260246000fd5b602002602001018190525080610fd790612ba5565b9050610ece565b509998505050505050505050565b6004805460405163f8b2491560e01b81526000926001600160a01b039092169163f8b249159161101e9189910161289e565b60206040518083038186803b15801561103657600080fd5b505afa15801561104a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061106e91906125cb565b60048054604051632c7b800360e11b81529293506000926001600160a01b03909116916358f70006916110a59186918a9101612a55565b60206040518083038186803b1580156110bd57600080fd5b505afa1580156110d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110f591906125cb565b9050600061110382866115ba565b6004805460405163d93379d160e01b81529182018690529192506000916001600160a01b03169063d93379d19060240160206040518083038186803b15801561114b57600080fd5b505afa15801561115f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111839190612023565b90506001600160a01b0381166111d05760405162461bcd60e51b81526020600482015260126024820152716572722d6e6f2d62656e656669636961727960701b6044820152606401610443565b600082815260096020526040812080546111e990612b3e565b9050116112305760405162461bcd60e51b8152602060048201526015602482015274195c9c8b5b1a58d95b9cd94b5b9bdd0b595e1a5cdd605a1b6044820152606401610443565b60008281526008602052604090205434101561127d5760405162461bcd60e51b815260206004820152600c60248201526b6572722d6d696e742d66656560a01b6044820152606401610443565b6000816001600160a01b03163460405160006040518083038185875af1925050503d80600081146112ca576040519150601f19603f3d011682016040523d82523d6000602084013e6112cf565b606091505b50509050806113115760405162461bcd60e51b815260206004820152600e60248201526d32b93916b9b2b73216b2ba3432b960911b6044820152606401610443565b61132d86846001604051806020016040528060008152506118c8565b7f107b11fb92e128aa01e9a8589d1442bb459293ec8589e6eb62f5074e52177d1a89898989876040516113649594939291906128b1565b60405180910390a1505050505050505050565b6004805460405163f8b2491560e01b81526060926000926001600160a01b03169163f8b24915916113aa9189910161289e565b60206040518083038186803b1580156113c257600080fd5b505afa1580156113d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113fa91906125cb565b60048054604051632c7b800360e11b81529293506000926001600160a01b03909116916358f70006916114319186918a9101612a55565b60206040518083038186803b15801561144957600080fd5b505afa15801561145d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061148191906125cb565b9050600061148f82866115ba565b6000818152600960205260408120805492935090916114ad90612b3e565b9050116114f45760405162461bcd60e51b8152602060048201526015602482015274195c9c8b5b1a58d95b9cd94b5b9bdd0b595e1a5cdd605a1b6044820152606401610443565b6000818152600960205260409020805461150d90612b3e565b80601f016020809104026020016040519081016040528092919081815260200182805461153990612b3e565b80156115865780601f1061155b57610100808354040283529160200191611586565b820191906000526020600020905b81548152906001019060200180831161156957829003601f168201915b505050505093505050509392505050565b600680546104d190612b3e565b6115b66115af611691565b83836119dd565b5050565b600082600683805190602001206040516020016115d993929190612742565b60408051601f1981840301815291905280516020909101209392505050565b611600611691565b6001600160a01b0316856001600160a01b03161480611626575061162685610360611691565b6116845760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b6064820152608401610443565b61065f8585858585611abe565b6003546000906001600160a01b03163314156116b4575060131936013560601c90565b6116bc611be6565b905090565b90565b81518351146117265760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608401610443565b6001600160a01b03841661174c5760405162461bcd60e51b81526004016104439061299e565b6000611756611691565b905060005b845181101561185a57600085828151811061178657634e487b7160e01b600052603260045260246000fd5b6020026020010151905060008583815181106117b257634e487b7160e01b600052603260045260246000fd5b602090810291909101810151600084815280835260408082206001600160a01b038e1683529093529190912054909150818110156118025760405162461bcd60e51b8152600401610443906129e3565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b1682528120805484929061183f908490612ac0565b925050819055505050508061185390612ba5565b905061175b565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516118aa929190612879565b60405180910390a46118c0818787878787611c0e565b505050505050565b6001600160a01b0384166119285760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b6064820152608401610443565b6000611932611691565b905061194d8160008761194488611d79565b61065f88611d79565b6000848152602081815260408083206001600160a01b03891684529091528120805485929061197d908490612ac0565b909155505060408051858152602081018590526001600160a01b0380881692600092918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461065f81600087878787611dd2565b816001600160a01b0316836001600160a01b03161415611a515760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b6064820152608401610443565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b038416611ae45760405162461bcd60e51b81526004016104439061299e565b6000611aee611691565b9050611aff81878761194488611d79565b6000848152602081815260408083206001600160a01b038a16845290915290205483811015611b405760405162461bcd60e51b8152600401610443906129e3565b6000858152602081815260408083206001600160a01b038b8116855292528083208785039055908816825281208054869290611b7d908490612ac0565b909155505060408051868152602081018690526001600160a01b03808916928a821692918616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611bdd828888888888611dd2565b50505050505050565b6003546000906001600160a01b0316331415611c09575060131936013560601c90565b503390565b6001600160a01b0384163b156118c05760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190611c529089908990889088908890600401612762565b602060405180830381600087803b158015611c6c57600080fd5b505af1925050508015611c9c575060408051601f3d908101601f19168201909252611c99918101906122e2565b60015b611d4957611ca8612bec565b806308c379a01415611ce25750611cbd612c03565b80611cc85750611ce4565b8060405162461bcd60e51b8152600401610443919061289e565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b6064820152608401610443565b6001600160e01b0319811663bc197c8160e01b14611bdd5760405162461bcd60e51b815260040161044390612956565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110611dc157634e487b7160e01b600052603260045260246000fd5b602090810291909101015292915050565b6001600160a01b0384163b156118c05760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190611e1690899089908890889088906004016127c0565b602060405180830381600087803b158015611e3057600080fd5b505af1925050508015611e60575060408051601f3d908101601f19168201909252611e5d918101906122e2565b60015b611e6c57611ca8612bec565b6001600160e01b0319811663f23a6e6160e01b14611bdd5760405162461bcd60e51b815260040161044390612956565b828054611ea890612b3e565b90600052602060002090601f016020900481019282611eca5760008555611f10565b82601f10611ee357805160ff1916838001178555611f10565b82800160010185558215611f10579182015b82811115611f10578251825591602001919060010190611ef5565b50611f1c929150611f20565b5090565b5b80821115611f1c5760008155600101611f21565b600082601f830112611f45578081fd5b81356020611f5282612a76565b604051611f5f8282612b79565b8381528281019150858301600585901b87018401881015611f7e578586fd5b855b85811015611f9c57813584529284019290840190600101611f80565b5090979650505050505050565b600082601f830112611fb9578081fd5b8135611fc481612a99565b604051611fd18282612b79565b828152856020848701011115611fe5578384fd5b82602086016020830137918201602001929092529392505050565b600060208284031215612011578081fd5b813561201c81612c8c565b9392505050565b600060208284031215612034578081fd5b815161201c81612c8c565b60008060408385031215612051578081fd5b823561205c81612c8c565b9150602083013561206c81612c8c565b809150509250929050565b600080600080600060a0868803121561208e578081fd5b853561209981612c8c565b945060208601356120a981612c8c565b935060408601356001600160401b03808211156120c4578283fd5b6120d089838a01611f35565b945060608801359150808211156120e5578283fd5b6120f189838a01611f35565b93506080880135915080821115612106578283fd5b5061211388828901611fa9565b9150509295509295909350565b600080600080600060a08688031215612137578081fd5b853561214281612c8c565b9450602086013561215281612c8c565b9350604086013592506060860135915060808601356001600160401b0381111561217a578182fd5b61211388828901611fa9565b60008060408385031215612198578182fd5b82356121a381612c8c565b9150602083013561206c81612ca4565b600080604083850312156121c5578182fd5b82356121d081612c8c565b946020939093013593505050565b600080604083850312156121f0578182fd5b82356001600160401b0380821115612206578384fd5b818501915085601f830112612219578384fd5b8135602061222682612a76565b6040516122338282612b79565b8381528281019150858301600585901b870184018b1015612252578889fd5b8896505b8487101561227d57803561226981612c8c565b835260019690960195918301918301612256565b5096505086013592505080821115612293578283fd5b506122a085828601611f35565b9150509250929050565b6000602082840312156122bb578081fd5b815161201c81612ca4565b6000602082840312156122d7578081fd5b813561201c81612cb2565b6000602082840312156122f3578081fd5b815161201c81612cb2565b60006020828403121561230f578081fd5b81516001600160401b03811115612324578182fd5b8201601f81018413612334578182fd5b805161233f81612a99565b60405161234c8282612b79565b828152866020848601011115612360578485fd5b612371836020830160208701612b0e565b9695505050505050565b60008060006060848603121561238f578081fd5b83356001600160401b03808211156123a5578283fd5b6123b187838801611fa9565b945060208601359150808211156123c6578283fd5b6123d287838801611fa9565b935060408601359150808211156123e7578283fd5b506123f486828701611fa9565b9150509250925092565b60008060008060808587031215612413578182fd5b84356001600160401b0380821115612429578384fd5b61243588838901611fa9565b9550602087013591508082111561244a578384fd5b61245688838901611fa9565b9450604087013591508082111561246b578384fd5b5061247887828801611fa9565b925050606085013561248981612c8c565b939692955090935050565b600080600080600060a086880312156124ab578283fd5b85356001600160401b03808211156124c1578485fd5b6124cd89838a01611fa9565b965060208801359150808211156124e2578485fd5b6124ee89838a01611fa9565b95506040880135915080821115612503578485fd5b61250f89838a01611fa9565b94506060880135915080821115612524578283fd5b5061253188828901611fa9565b95989497509295608001359392505050565b60008060008060808587031215612558578182fd5b84356001600160401b038082111561256e578384fd5b61257a88838901611fa9565b9550602087013591508082111561258f578384fd5b5061259c87828801611fa9565b949794965050505060408301359260600135919050565b6000602082840312156125c4578081fd5b5035919050565b6000602082840312156125dc578081fd5b5051919050565b600080604083850312156125f5578182fd5b8235915060208301356001600160401b03811115612611578182fd5b6122a085828601611fa9565b6000815180845260208085019450808401835b8381101561264c57815187529582019590820190600101612630565b509495945050505050565b6000815180845261266f816020860160208601612b0e565b601f01601f19169290920160200192915050565b8054600090600181811c908083168061269d57607f831692505b60208084108214156126bd57634e487b7160e01b86526022600452602486fd5b8180156126d157600181146126e25761270f565b60ff1986168952848901965061270f565b60008881526020902060005b868110156127075781548b8201529085019083016126ee565b505084890196505b50505050505092915050565b6000835161272d818460208801612b0e565b61273981840185612683565b95945050505050565b83815260006127546020830185612683565b928352505060200192915050565b6001600160a01b0386811682528516602082015260a06040820181905260009061278e9083018661261d565b82810360608401526127a0818661261d565b905082810360808401526127b48185612657565b98975050505050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a0608082018190526000906127fa90830184612657565b979650505050505050565b6000602080830181845280855180835260408601915060408160051b8701019250838701855b8281101561285957603f19888603018452612847858351612657565b9450928501929085019060010161282b565b5092979650505050505050565b60208152600061201c602083018461261d565b60408152600061288c604083018561261d565b8281036020840152612739818561261d565b60208152600061201c6020830184612657565b60a0815260006128c460a0830188612657565b82810360208401526128d68188612657565b905082810360408401526128ea8187612657565b6001600160a01b039590951660608401525050608001529392505050565b60a08152600061291b60a0830188612657565b828103602084015261292d8188612657565b905082810360408401526129418187612657565b60608401959095525050608001529392505050565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b6020808252600e908201526d6572722d656d7074792d6e616d6560901b604082015260600190565b828152604060208201526000612a6e6040830184612657565b949350505050565b60006001600160401b03821115612a8f57612a8f612bd6565b5060051b60200190565b60006001600160401b03821115612ab257612ab2612bd6565b50601f01601f191660200190565b60008219821115612ad357612ad3612bc0565b500190565b6000816000190483118215151615612af257612af2612bc0565b500290565b600082821015612b0957612b09612bc0565b500390565b60005b83811015612b29578181015183820152602001612b11565b83811115612b38576000848401525b50505050565b600181811c90821680612b5257607f821691505b60208210811415612b7357634e487b7160e01b600052602260045260246000fd5b50919050565b601f8201601f191681016001600160401b0381118282101715612b9e57612b9e612bd6565b6040525050565b6000600019821415612bb957612bb9612bc0565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d11156116c157600481823e5160e01c90565b600060443d1015612c115790565b6040516003193d81016004833e81513d6001600160401b038160248401118184111715612c4057505050505090565b8285019150815181811115612c585750505050505090565b843d8701016020828501011115612c725750505050505090565b612c8160208286010187612b79565b509095945050505050565b6001600160a01b0381168114612ca157600080fd5b50565b8015158114612ca157600080fd5b6001600160e01b031981168114612ca157600080fdfea2646970667358221220824aab5d7a722b8966b3e2c265176eb6618c25c650d0cd1495fd48506cf1681464736f6c63430008040033",
}

// LicenseABI is the input ABI used to generate the binding from.
// Deprecated: Use LicenseMetaData.ABI instead.
var LicenseABI = LicenseMetaData.ABI

// LicenseBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use LicenseMetaData.Bin instead.
var LicenseBin = LicenseMetaData.Bin

// DeployLicense deploys a new Ethereum contract, binding an instance of License to it.
func DeployLicense(auth *bind.TransactOpts, backend bind.ContractBackend, _valistRegistry common.Address, _trustedForwarder common.Address) (common.Address, *types.Transaction, *License, error) {
	parsed, err := LicenseMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(LicenseBin), backend, _valistRegistry, _trustedForwarder)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &License{LicenseCaller: LicenseCaller{contract: contract}, LicenseTransactor: LicenseTransactor{contract: contract}, LicenseFilterer: LicenseFilterer{contract: contract}}, nil
}

// License is an auto generated Go binding around an Ethereum contract.
type License struct {
	LicenseCaller     // Read-only binding to the contract
	LicenseTransactor // Write-only binding to the contract
	LicenseFilterer   // Log filterer for contract events
}

// LicenseCaller is an auto generated read-only Go binding around an Ethereum contract.
type LicenseCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LicenseTransactor is an auto generated write-only Go binding around an Ethereum contract.
type LicenseTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LicenseFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type LicenseFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LicenseSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type LicenseSession struct {
	Contract     *License          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// LicenseCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type LicenseCallerSession struct {
	Contract *LicenseCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// LicenseTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type LicenseTransactorSession struct {
	Contract     *LicenseTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// LicenseRaw is an auto generated low-level Go binding around an Ethereum contract.
type LicenseRaw struct {
	Contract *License // Generic contract binding to access the raw methods on
}

// LicenseCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type LicenseCallerRaw struct {
	Contract *LicenseCaller // Generic read-only contract binding to access the raw methods on
}

// LicenseTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type LicenseTransactorRaw struct {
	Contract *LicenseTransactor // Generic write-only contract binding to access the raw methods on
}

// NewLicense creates a new instance of License, bound to a specific deployed contract.
func NewLicense(address common.Address, backend bind.ContractBackend) (*License, error) {
	contract, err := bindLicense(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &License{LicenseCaller: LicenseCaller{contract: contract}, LicenseTransactor: LicenseTransactor{contract: contract}, LicenseFilterer: LicenseFilterer{contract: contract}}, nil
}

// NewLicenseCaller creates a new read-only instance of License, bound to a specific deployed contract.
func NewLicenseCaller(address common.Address, caller bind.ContractCaller) (*LicenseCaller, error) {
	contract, err := bindLicense(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &LicenseCaller{contract: contract}, nil
}

// NewLicenseTransactor creates a new write-only instance of License, bound to a specific deployed contract.
func NewLicenseTransactor(address common.Address, transactor bind.ContractTransactor) (*LicenseTransactor, error) {
	contract, err := bindLicense(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &LicenseTransactor{contract: contract}, nil
}

// NewLicenseFilterer creates a new log filterer instance of License, bound to a specific deployed contract.
func NewLicenseFilterer(address common.Address, filterer bind.ContractFilterer) (*LicenseFilterer, error) {
	contract, err := bindLicense(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &LicenseFilterer{contract: contract}, nil
}

// bindLicense binds a generic wrapper to an already deployed contract.
func bindLicense(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(LicenseABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_License *LicenseRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _License.Contract.LicenseCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_License *LicenseRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _License.Contract.LicenseTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_License *LicenseRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _License.Contract.LicenseTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_License *LicenseCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _License.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_License *LicenseTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _License.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_License *LicenseTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _License.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address account, uint256 id) view returns(uint256)
func (_License *LicenseCaller) BalanceOf(opts *bind.CallOpts, account common.Address, id *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _License.contract.Call(opts, &out, "balanceOf", account, id)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address account, uint256 id) view returns(uint256)
func (_License *LicenseSession) BalanceOf(account common.Address, id *big.Int) (*big.Int, error) {
	return _License.Contract.BalanceOf(&_License.CallOpts, account, id)
}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address account, uint256 id) view returns(uint256)
func (_License *LicenseCallerSession) BalanceOf(account common.Address, id *big.Int) (*big.Int, error) {
	return _License.Contract.BalanceOf(&_License.CallOpts, account, id)
}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] accounts, uint256[] ids) view returns(uint256[])
func (_License *LicenseCaller) BalanceOfBatch(opts *bind.CallOpts, accounts []common.Address, ids []*big.Int) ([]*big.Int, error) {
	var out []interface{}
	err := _License.contract.Call(opts, &out, "balanceOfBatch", accounts, ids)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] accounts, uint256[] ids) view returns(uint256[])
func (_License *LicenseSession) BalanceOfBatch(accounts []common.Address, ids []*big.Int) ([]*big.Int, error) {
	return _License.Contract.BalanceOfBatch(&_License.CallOpts, accounts, ids)
}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] accounts, uint256[] ids) view returns(uint256[])
func (_License *LicenseCallerSession) BalanceOfBatch(accounts []common.Address, ids []*big.Int) ([]*big.Int, error) {
	return _License.Contract.BalanceOfBatch(&_License.CallOpts, accounts, ids)
}

// GetLicenseID is a free data retrieval call binding the contract method 0xdab344f8.
//
// Solidity: function getLicenseID(uint256 _projectID, string _licenseName) view returns(uint256)
func (_License *LicenseCaller) GetLicenseID(opts *bind.CallOpts, _projectID *big.Int, _licenseName string) (*big.Int, error) {
	var out []interface{}
	err := _License.contract.Call(opts, &out, "getLicenseID", _projectID, _licenseName)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetLicenseID is a free data retrieval call binding the contract method 0xdab344f8.
//
// Solidity: function getLicenseID(uint256 _projectID, string _licenseName) view returns(uint256)
func (_License *LicenseSession) GetLicenseID(_projectID *big.Int, _licenseName string) (*big.Int, error) {
	return _License.Contract.GetLicenseID(&_License.CallOpts, _projectID, _licenseName)
}

// GetLicenseID is a free data retrieval call binding the contract method 0xdab344f8.
//
// Solidity: function getLicenseID(uint256 _projectID, string _licenseName) view returns(uint256)
func (_License *LicenseCallerSession) GetLicenseID(_projectID *big.Int, _licenseName string) (*big.Int, error) {
	return _License.Contract.GetLicenseID(&_License.CallOpts, _projectID, _licenseName)
}

// GetLicenseMetaURI is a free data retrieval call binding the contract method 0x6a0ccb42.
//
// Solidity: function getLicenseMetaURI(string _teamName, string _projectName, string _licenseName) view returns(string)
func (_License *LicenseCaller) GetLicenseMetaURI(opts *bind.CallOpts, _teamName string, _projectName string, _licenseName string) (string, error) {
	var out []interface{}
	err := _License.contract.Call(opts, &out, "getLicenseMetaURI", _teamName, _projectName, _licenseName)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetLicenseMetaURI is a free data retrieval call binding the contract method 0x6a0ccb42.
//
// Solidity: function getLicenseMetaURI(string _teamName, string _projectName, string _licenseName) view returns(string)
func (_License *LicenseSession) GetLicenseMetaURI(_teamName string, _projectName string, _licenseName string) (string, error) {
	return _License.Contract.GetLicenseMetaURI(&_License.CallOpts, _teamName, _projectName, _licenseName)
}

// GetLicenseMetaURI is a free data retrieval call binding the contract method 0x6a0ccb42.
//
// Solidity: function getLicenseMetaURI(string _teamName, string _projectName, string _licenseName) view returns(string)
func (_License *LicenseCallerSession) GetLicenseMetaURI(_teamName string, _projectName string, _licenseName string) (string, error) {
	return _License.Contract.GetLicenseMetaURI(&_License.CallOpts, _teamName, _projectName, _licenseName)
}

// GetNamesByProjectID is a free data retrieval call binding the contract method 0x63962d48.
//
// Solidity: function getNamesByProjectID(string _teamName, string _projectName, uint256 _page, uint256 _size) view returns(string[])
func (_License *LicenseCaller) GetNamesByProjectID(opts *bind.CallOpts, _teamName string, _projectName string, _page *big.Int, _size *big.Int) ([]string, error) {
	var out []interface{}
	err := _License.contract.Call(opts, &out, "getNamesByProjectID", _teamName, _projectName, _page, _size)

	if err != nil {
		return *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)

	return out0, err

}

// GetNamesByProjectID is a free data retrieval call binding the contract method 0x63962d48.
//
// Solidity: function getNamesByProjectID(string _teamName, string _projectName, uint256 _page, uint256 _size) view returns(string[])
func (_License *LicenseSession) GetNamesByProjectID(_teamName string, _projectName string, _page *big.Int, _size *big.Int) ([]string, error) {
	return _License.Contract.GetNamesByProjectID(&_License.CallOpts, _teamName, _projectName, _page, _size)
}

// GetNamesByProjectID is a free data retrieval call binding the contract method 0x63962d48.
//
// Solidity: function getNamesByProjectID(string _teamName, string _projectName, uint256 _page, uint256 _size) view returns(string[])
func (_License *LicenseCallerSession) GetNamesByProjectID(_teamName string, _projectName string, _page *big.Int, _size *big.Int) ([]string, error) {
	return _License.Contract.GetNamesByProjectID(&_License.CallOpts, _teamName, _projectName, _page, _size)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address account, address operator) view returns(bool)
func (_License *LicenseCaller) IsApprovedForAll(opts *bind.CallOpts, account common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _License.contract.Call(opts, &out, "isApprovedForAll", account, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address account, address operator) view returns(bool)
func (_License *LicenseSession) IsApprovedForAll(account common.Address, operator common.Address) (bool, error) {
	return _License.Contract.IsApprovedForAll(&_License.CallOpts, account, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address account, address operator) view returns(bool)
func (_License *LicenseCallerSession) IsApprovedForAll(account common.Address, operator common.Address) (bool, error) {
	return _License.Contract.IsApprovedForAll(&_License.CallOpts, account, operator)
}

// IsTrustedForwarder is a free data retrieval call binding the contract method 0x572b6c05.
//
// Solidity: function isTrustedForwarder(address forwarder) view returns(bool)
func (_License *LicenseCaller) IsTrustedForwarder(opts *bind.CallOpts, forwarder common.Address) (bool, error) {
	var out []interface{}
	err := _License.contract.Call(opts, &out, "isTrustedForwarder", forwarder)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsTrustedForwarder is a free data retrieval call binding the contract method 0x572b6c05.
//
// Solidity: function isTrustedForwarder(address forwarder) view returns(bool)
func (_License *LicenseSession) IsTrustedForwarder(forwarder common.Address) (bool, error) {
	return _License.Contract.IsTrustedForwarder(&_License.CallOpts, forwarder)
}

// IsTrustedForwarder is a free data retrieval call binding the contract method 0x572b6c05.
//
// Solidity: function isTrustedForwarder(address forwarder) view returns(bool)
func (_License *LicenseCallerSession) IsTrustedForwarder(forwarder common.Address) (bool, error) {
	return _License.Contract.IsTrustedForwarder(&_License.CallOpts, forwarder)
}

// MetaByID is a free data retrieval call binding the contract method 0x43417c06.
//
// Solidity: function metaByID(uint256 ) view returns(string)
func (_License *LicenseCaller) MetaByID(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var out []interface{}
	err := _License.contract.Call(opts, &out, "metaByID", arg0)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// MetaByID is a free data retrieval call binding the contract method 0x43417c06.
//
// Solidity: function metaByID(uint256 ) view returns(string)
func (_License *LicenseSession) MetaByID(arg0 *big.Int) (string, error) {
	return _License.Contract.MetaByID(&_License.CallOpts, arg0)
}

// MetaByID is a free data retrieval call binding the contract method 0x43417c06.
//
// Solidity: function metaByID(uint256 ) view returns(string)
func (_License *LicenseCallerSession) MetaByID(arg0 *big.Int) (string, error) {
	return _License.Contract.MetaByID(&_License.CallOpts, arg0)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_License *LicenseCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _License.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_License *LicenseSession) Name() (string, error) {
	return _License.Contract.Name(&_License.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_License *LicenseCallerSession) Name() (string, error) {
	return _License.Contract.Name(&_License.CallOpts)
}

// PriceByID is a free data retrieval call binding the contract method 0xfc84f13f.
//
// Solidity: function priceByID(uint256 ) view returns(uint256)
func (_License *LicenseCaller) PriceByID(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _License.contract.Call(opts, &out, "priceByID", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// PriceByID is a free data retrieval call binding the contract method 0xfc84f13f.
//
// Solidity: function priceByID(uint256 ) view returns(uint256)
func (_License *LicenseSession) PriceByID(arg0 *big.Int) (*big.Int, error) {
	return _License.Contract.PriceByID(&_License.CallOpts, arg0)
}

// PriceByID is a free data retrieval call binding the contract method 0xfc84f13f.
//
// Solidity: function priceByID(uint256 ) view returns(uint256)
func (_License *LicenseCallerSession) PriceByID(arg0 *big.Int) (*big.Int, error) {
	return _License.Contract.PriceByID(&_License.CallOpts, arg0)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_License *LicenseCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _License.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_License *LicenseSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _License.Contract.SupportsInterface(&_License.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_License *LicenseCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _License.Contract.SupportsInterface(&_License.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_License *LicenseCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _License.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_License *LicenseSession) Symbol() (string, error) {
	return _License.Contract.Symbol(&_License.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_License *LicenseCallerSession) Symbol() (string, error) {
	return _License.Contract.Symbol(&_License.CallOpts)
}

// Uri is a free data retrieval call binding the contract method 0x0e89341c.
//
// Solidity: function uri(uint256 id) view returns(string)
func (_License *LicenseCaller) Uri(opts *bind.CallOpts, id *big.Int) (string, error) {
	var out []interface{}
	err := _License.contract.Call(opts, &out, "uri", id)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Uri is a free data retrieval call binding the contract method 0x0e89341c.
//
// Solidity: function uri(uint256 id) view returns(string)
func (_License *LicenseSession) Uri(id *big.Int) (string, error) {
	return _License.Contract.Uri(&_License.CallOpts, id)
}

// Uri is a free data retrieval call binding the contract method 0x0e89341c.
//
// Solidity: function uri(uint256 id) view returns(string)
func (_License *LicenseCallerSession) Uri(id *big.Int) (string, error) {
	return _License.Contract.Uri(&_License.CallOpts, id)
}

// VersionRecipient is a free data retrieval call binding the contract method 0x486ff0cd.
//
// Solidity: function versionRecipient() view returns(string)
func (_License *LicenseCaller) VersionRecipient(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _License.contract.Call(opts, &out, "versionRecipient")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// VersionRecipient is a free data retrieval call binding the contract method 0x486ff0cd.
//
// Solidity: function versionRecipient() view returns(string)
func (_License *LicenseSession) VersionRecipient() (string, error) {
	return _License.Contract.VersionRecipient(&_License.CallOpts)
}

// VersionRecipient is a free data retrieval call binding the contract method 0x486ff0cd.
//
// Solidity: function versionRecipient() view returns(string)
func (_License *LicenseCallerSession) VersionRecipient() (string, error) {
	return _License.Contract.VersionRecipient(&_License.CallOpts)
}

// CreateLicense is a paid mutator transaction binding the contract method 0x490693bf.
//
// Solidity: function createLicense(string _teamName, string _projectName, string _licenseName, string _metaURI, uint256 _mintPrice) returns()
func (_License *LicenseTransactor) CreateLicense(opts *bind.TransactOpts, _teamName string, _projectName string, _licenseName string, _metaURI string, _mintPrice *big.Int) (*types.Transaction, error) {
	return _License.contract.Transact(opts, "createLicense", _teamName, _projectName, _licenseName, _metaURI, _mintPrice)
}

// CreateLicense is a paid mutator transaction binding the contract method 0x490693bf.
//
// Solidity: function createLicense(string _teamName, string _projectName, string _licenseName, string _metaURI, uint256 _mintPrice) returns()
func (_License *LicenseSession) CreateLicense(_teamName string, _projectName string, _licenseName string, _metaURI string, _mintPrice *big.Int) (*types.Transaction, error) {
	return _License.Contract.CreateLicense(&_License.TransactOpts, _teamName, _projectName, _licenseName, _metaURI, _mintPrice)
}

// CreateLicense is a paid mutator transaction binding the contract method 0x490693bf.
//
// Solidity: function createLicense(string _teamName, string _projectName, string _licenseName, string _metaURI, uint256 _mintPrice) returns()
func (_License *LicenseTransactorSession) CreateLicense(_teamName string, _projectName string, _licenseName string, _metaURI string, _mintPrice *big.Int) (*types.Transaction, error) {
	return _License.Contract.CreateLicense(&_License.TransactOpts, _teamName, _projectName, _licenseName, _metaURI, _mintPrice)
}

// MintLicense is a paid mutator transaction binding the contract method 0x67e9a744.
//
// Solidity: function mintLicense(string _teamName, string _projectName, string _licenseName, address _recipient) payable returns()
func (_License *LicenseTransactor) MintLicense(opts *bind.TransactOpts, _teamName string, _projectName string, _licenseName string, _recipient common.Address) (*types.Transaction, error) {
	return _License.contract.Transact(opts, "mintLicense", _teamName, _projectName, _licenseName, _recipient)
}

// MintLicense is a paid mutator transaction binding the contract method 0x67e9a744.
//
// Solidity: function mintLicense(string _teamName, string _projectName, string _licenseName, address _recipient) payable returns()
func (_License *LicenseSession) MintLicense(_teamName string, _projectName string, _licenseName string, _recipient common.Address) (*types.Transaction, error) {
	return _License.Contract.MintLicense(&_License.TransactOpts, _teamName, _projectName, _licenseName, _recipient)
}

// MintLicense is a paid mutator transaction binding the contract method 0x67e9a744.
//
// Solidity: function mintLicense(string _teamName, string _projectName, string _licenseName, address _recipient) payable returns()
func (_License *LicenseTransactorSession) MintLicense(_teamName string, _projectName string, _licenseName string, _recipient common.Address) (*types.Transaction, error) {
	return _License.Contract.MintLicense(&_License.TransactOpts, _teamName, _projectName, _licenseName, _recipient)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address from, address to, uint256[] ids, uint256[] amounts, bytes data) returns()
func (_License *LicenseTransactor) SafeBatchTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, ids []*big.Int, amounts []*big.Int, data []byte) (*types.Transaction, error) {
	return _License.contract.Transact(opts, "safeBatchTransferFrom", from, to, ids, amounts, data)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address from, address to, uint256[] ids, uint256[] amounts, bytes data) returns()
func (_License *LicenseSession) SafeBatchTransferFrom(from common.Address, to common.Address, ids []*big.Int, amounts []*big.Int, data []byte) (*types.Transaction, error) {
	return _License.Contract.SafeBatchTransferFrom(&_License.TransactOpts, from, to, ids, amounts, data)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address from, address to, uint256[] ids, uint256[] amounts, bytes data) returns()
func (_License *LicenseTransactorSession) SafeBatchTransferFrom(from common.Address, to common.Address, ids []*big.Int, amounts []*big.Int, data []byte) (*types.Transaction, error) {
	return _License.Contract.SafeBatchTransferFrom(&_License.TransactOpts, from, to, ids, amounts, data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes data) returns()
func (_License *LicenseTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, id *big.Int, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _License.contract.Transact(opts, "safeTransferFrom", from, to, id, amount, data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes data) returns()
func (_License *LicenseSession) SafeTransferFrom(from common.Address, to common.Address, id *big.Int, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _License.Contract.SafeTransferFrom(&_License.TransactOpts, from, to, id, amount, data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes data) returns()
func (_License *LicenseTransactorSession) SafeTransferFrom(from common.Address, to common.Address, id *big.Int, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _License.Contract.SafeTransferFrom(&_License.TransactOpts, from, to, id, amount, data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_License *LicenseTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _License.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_License *LicenseSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _License.Contract.SetApprovalForAll(&_License.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_License *LicenseTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _License.Contract.SetApprovalForAll(&_License.TransactOpts, operator, approved)
}

// LicenseApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the License contract.
type LicenseApprovalForAllIterator struct {
	Event *LicenseApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LicenseApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LicenseApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LicenseApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LicenseApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LicenseApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LicenseApprovalForAll represents a ApprovalForAll event raised by the License contract.
type LicenseApprovalForAll struct {
	Account  common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed account, address indexed operator, bool approved)
func (_License *LicenseFilterer) FilterApprovalForAll(opts *bind.FilterOpts, account []common.Address, operator []common.Address) (*LicenseApprovalForAllIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _License.contract.FilterLogs(opts, "ApprovalForAll", accountRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &LicenseApprovalForAllIterator{contract: _License.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed account, address indexed operator, bool approved)
func (_License *LicenseFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *LicenseApprovalForAll, account []common.Address, operator []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _License.contract.WatchLogs(opts, "ApprovalForAll", accountRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LicenseApprovalForAll)
				if err := _License.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed account, address indexed operator, bool approved)
func (_License *LicenseFilterer) ParseApprovalForAll(log types.Log) (*LicenseApprovalForAll, error) {
	event := new(LicenseApprovalForAll)
	if err := _License.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LicenseLicenseCreatedIterator is returned from FilterLicenseCreated and is used to iterate over the raw logs and unpacked data for LicenseCreated events raised by the License contract.
type LicenseLicenseCreatedIterator struct {
	Event *LicenseLicenseCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LicenseLicenseCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LicenseLicenseCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LicenseLicenseCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LicenseLicenseCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LicenseLicenseCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LicenseLicenseCreated represents a LicenseCreated event raised by the License contract.
type LicenseLicenseCreated struct {
	TeamName    string
	ProjectName string
	LicenseName string
	MintPrice   *big.Int
	LicenseID   *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterLicenseCreated is a free log retrieval operation binding the contract event 0x0e5932237fa54008b385602dec56e11f77845565e34920db3f9a525b982a31aa.
//
// Solidity: event LicenseCreated(string _teamName, string _projectName, string _licenseName, uint256 _mintPrice, uint256 _licenseID)
func (_License *LicenseFilterer) FilterLicenseCreated(opts *bind.FilterOpts) (*LicenseLicenseCreatedIterator, error) {

	logs, sub, err := _License.contract.FilterLogs(opts, "LicenseCreated")
	if err != nil {
		return nil, err
	}
	return &LicenseLicenseCreatedIterator{contract: _License.contract, event: "LicenseCreated", logs: logs, sub: sub}, nil
}

// WatchLicenseCreated is a free log subscription operation binding the contract event 0x0e5932237fa54008b385602dec56e11f77845565e34920db3f9a525b982a31aa.
//
// Solidity: event LicenseCreated(string _teamName, string _projectName, string _licenseName, uint256 _mintPrice, uint256 _licenseID)
func (_License *LicenseFilterer) WatchLicenseCreated(opts *bind.WatchOpts, sink chan<- *LicenseLicenseCreated) (event.Subscription, error) {

	logs, sub, err := _License.contract.WatchLogs(opts, "LicenseCreated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LicenseLicenseCreated)
				if err := _License.contract.UnpackLog(event, "LicenseCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLicenseCreated is a log parse operation binding the contract event 0x0e5932237fa54008b385602dec56e11f77845565e34920db3f9a525b982a31aa.
//
// Solidity: event LicenseCreated(string _teamName, string _projectName, string _licenseName, uint256 _mintPrice, uint256 _licenseID)
func (_License *LicenseFilterer) ParseLicenseCreated(log types.Log) (*LicenseLicenseCreated, error) {
	event := new(LicenseLicenseCreated)
	if err := _License.contract.UnpackLog(event, "LicenseCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LicenseLicenseMintedIterator is returned from FilterLicenseMinted and is used to iterate over the raw logs and unpacked data for LicenseMinted events raised by the License contract.
type LicenseLicenseMintedIterator struct {
	Event *LicenseLicenseMinted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LicenseLicenseMintedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LicenseLicenseMinted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LicenseLicenseMinted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LicenseLicenseMintedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LicenseLicenseMintedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LicenseLicenseMinted represents a LicenseMinted event raised by the License contract.
type LicenseLicenseMinted struct {
	TeamName    string
	ProjectName string
	LicenseName string
	Recipient   common.Address
	LicenseID   *big.Int
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterLicenseMinted is a free log retrieval operation binding the contract event 0x107b11fb92e128aa01e9a8589d1442bb459293ec8589e6eb62f5074e52177d1a.
//
// Solidity: event LicenseMinted(string _teamName, string _projectName, string _licenseName, address _recipient, uint256 _licenseID)
func (_License *LicenseFilterer) FilterLicenseMinted(opts *bind.FilterOpts) (*LicenseLicenseMintedIterator, error) {

	logs, sub, err := _License.contract.FilterLogs(opts, "LicenseMinted")
	if err != nil {
		return nil, err
	}
	return &LicenseLicenseMintedIterator{contract: _License.contract, event: "LicenseMinted", logs: logs, sub: sub}, nil
}

// WatchLicenseMinted is a free log subscription operation binding the contract event 0x107b11fb92e128aa01e9a8589d1442bb459293ec8589e6eb62f5074e52177d1a.
//
// Solidity: event LicenseMinted(string _teamName, string _projectName, string _licenseName, address _recipient, uint256 _licenseID)
func (_License *LicenseFilterer) WatchLicenseMinted(opts *bind.WatchOpts, sink chan<- *LicenseLicenseMinted) (event.Subscription, error) {

	logs, sub, err := _License.contract.WatchLogs(opts, "LicenseMinted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LicenseLicenseMinted)
				if err := _License.contract.UnpackLog(event, "LicenseMinted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLicenseMinted is a log parse operation binding the contract event 0x107b11fb92e128aa01e9a8589d1442bb459293ec8589e6eb62f5074e52177d1a.
//
// Solidity: event LicenseMinted(string _teamName, string _projectName, string _licenseName, address _recipient, uint256 _licenseID)
func (_License *LicenseFilterer) ParseLicenseMinted(log types.Log) (*LicenseLicenseMinted, error) {
	event := new(LicenseLicenseMinted)
	if err := _License.contract.UnpackLog(event, "LicenseMinted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LicenseTransferBatchIterator is returned from FilterTransferBatch and is used to iterate over the raw logs and unpacked data for TransferBatch events raised by the License contract.
type LicenseTransferBatchIterator struct {
	Event *LicenseTransferBatch // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LicenseTransferBatchIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LicenseTransferBatch)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LicenseTransferBatch)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LicenseTransferBatchIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LicenseTransferBatchIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LicenseTransferBatch represents a TransferBatch event raised by the License contract.
type LicenseTransferBatch struct {
	Operator common.Address
	From     common.Address
	To       common.Address
	Ids      []*big.Int
	Values   []*big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTransferBatch is a free log retrieval operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values)
func (_License *LicenseFilterer) FilterTransferBatch(opts *bind.FilterOpts, operator []common.Address, from []common.Address, to []common.Address) (*LicenseTransferBatchIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _License.contract.FilterLogs(opts, "TransferBatch", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &LicenseTransferBatchIterator{contract: _License.contract, event: "TransferBatch", logs: logs, sub: sub}, nil
}

// WatchTransferBatch is a free log subscription operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values)
func (_License *LicenseFilterer) WatchTransferBatch(opts *bind.WatchOpts, sink chan<- *LicenseTransferBatch, operator []common.Address, from []common.Address, to []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _License.contract.WatchLogs(opts, "TransferBatch", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LicenseTransferBatch)
				if err := _License.contract.UnpackLog(event, "TransferBatch", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransferBatch is a log parse operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values)
func (_License *LicenseFilterer) ParseTransferBatch(log types.Log) (*LicenseTransferBatch, error) {
	event := new(LicenseTransferBatch)
	if err := _License.contract.UnpackLog(event, "TransferBatch", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LicenseTransferSingleIterator is returned from FilterTransferSingle and is used to iterate over the raw logs and unpacked data for TransferSingle events raised by the License contract.
type LicenseTransferSingleIterator struct {
	Event *LicenseTransferSingle // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LicenseTransferSingleIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LicenseTransferSingle)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LicenseTransferSingle)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LicenseTransferSingleIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LicenseTransferSingleIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LicenseTransferSingle represents a TransferSingle event raised by the License contract.
type LicenseTransferSingle struct {
	Operator common.Address
	From     common.Address
	To       common.Address
	Id       *big.Int
	Value    *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTransferSingle is a free log retrieval operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value)
func (_License *LicenseFilterer) FilterTransferSingle(opts *bind.FilterOpts, operator []common.Address, from []common.Address, to []common.Address) (*LicenseTransferSingleIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _License.contract.FilterLogs(opts, "TransferSingle", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &LicenseTransferSingleIterator{contract: _License.contract, event: "TransferSingle", logs: logs, sub: sub}, nil
}

// WatchTransferSingle is a free log subscription operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value)
func (_License *LicenseFilterer) WatchTransferSingle(opts *bind.WatchOpts, sink chan<- *LicenseTransferSingle, operator []common.Address, from []common.Address, to []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _License.contract.WatchLogs(opts, "TransferSingle", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LicenseTransferSingle)
				if err := _License.contract.UnpackLog(event, "TransferSingle", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransferSingle is a log parse operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value)
func (_License *LicenseFilterer) ParseTransferSingle(log types.Log) (*LicenseTransferSingle, error) {
	event := new(LicenseTransferSingle)
	if err := _License.contract.UnpackLog(event, "TransferSingle", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LicenseURIIterator is returned from FilterURI and is used to iterate over the raw logs and unpacked data for URI events raised by the License contract.
type LicenseURIIterator struct {
	Event *LicenseURI // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LicenseURIIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LicenseURI)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LicenseURI)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LicenseURIIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LicenseURIIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LicenseURI represents a URI event raised by the License contract.
type LicenseURI struct {
	Value string
	Id    *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterURI is a free log retrieval operation binding the contract event 0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b.
//
// Solidity: event URI(string value, uint256 indexed id)
func (_License *LicenseFilterer) FilterURI(opts *bind.FilterOpts, id []*big.Int) (*LicenseURIIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _License.contract.FilterLogs(opts, "URI", idRule)
	if err != nil {
		return nil, err
	}
	return &LicenseURIIterator{contract: _License.contract, event: "URI", logs: logs, sub: sub}, nil
}

// WatchURI is a free log subscription operation binding the contract event 0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b.
//
// Solidity: event URI(string value, uint256 indexed id)
func (_License *LicenseFilterer) WatchURI(opts *bind.WatchOpts, sink chan<- *LicenseURI, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _License.contract.WatchLogs(opts, "URI", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LicenseURI)
				if err := _License.contract.UnpackLog(event, "URI", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseURI is a log parse operation binding the contract event 0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b.
//
// Solidity: event URI(string value, uint256 indexed id)
func (_License *LicenseFilterer) ParseURI(log types.Log) (*LicenseURI, error) {
	event := new(LicenseURI)
	if err := _License.contract.UnpackLog(event, "URI", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
