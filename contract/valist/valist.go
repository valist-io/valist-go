// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package valist

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// ValistMetaData contains all meta data concerning the Valist contract.
var ValistMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trustedForwarder\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_teamName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_projectName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_metaURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"ProjectCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_teamName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_projectName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_member\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"ProjectMemberAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_teamName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_projectName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_member\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"ProjectMemberRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_teamName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_projectName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_metaURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"ProjectUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_teamName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_projectName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_releaseName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"ReleaseApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_teamName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_projectName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_releaseName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_metaURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"ReleaseCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_teamName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_projectName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_releaseName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"ReleaseRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_teamID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_oldBeneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newBeneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"TeamBeneficiaryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_teamName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_metaURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"TeamCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_teamName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_member\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"TeamMemberAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_teamName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_member\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"TeamMemberRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_teamName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_metaURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"TeamUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_teamName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_projectName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addProjectMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_teamName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addTeamMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_teamName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_projectName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_releaseName\",\"type\":\"string\"}],\"name\":\"approveRelease\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_teamName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_projectName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_metaURI\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"_members\",\"type\":\"address[]\"}],\"name\":\"createProject\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_teamName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_projectName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_releaseName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_metaURI\",\"type\":\"string\"}],\"name\":\"createRelease\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_teamName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_metaURI\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_members\",\"type\":\"address[]\"}],\"name\":\"createTeam\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_teamName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_projectName\",\"type\":\"string\"}],\"name\":\"getLatestReleaseName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_teamID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_projectName\",\"type\":\"string\"}],\"name\":\"getProjectID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_teamName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_projectName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_page\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"}],\"name\":\"getProjectMembers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_teamName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_projectName\",\"type\":\"string\"}],\"name\":\"getProjectMetaURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_teamName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_page\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"}],\"name\":\"getProjectNames\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_teamName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_projectName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_releaseName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_page\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"}],\"name\":\"getReleaseApprovers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectID\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_releaseName\",\"type\":\"string\"}],\"name\":\"getReleaseID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_teamName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_projectName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_releaseName\",\"type\":\"string\"}],\"name\":\"getReleaseMetaURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_teamName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_projectName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_page\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"}],\"name\":\"getReleaseNames\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_teamName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_projectName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_releaseName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_page\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"}],\"name\":\"getReleaseRejectors\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_teamID\",\"type\":\"uint256\"}],\"name\":\"getTeamBeneficiary\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_teamName\",\"type\":\"string\"}],\"name\":\"getTeamID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_teamName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_page\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"}],\"name\":\"getTeamMembers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_teamName\",\"type\":\"string\"}],\"name\":\"getTeamMetaURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_page\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"}],\"name\":\"getTeamNames\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_member\",\"type\":\"address\"}],\"name\":\"isProjectMember\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_teamID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_member\",\"type\":\"address\"}],\"name\":\"isTeamMember\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"metaByID\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_teamName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_projectName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_releaseName\",\"type\":\"string\"}],\"name\":\"rejectRelease\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_teamName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_projectName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeProjectMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_teamName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeTeamMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_teamName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_projectName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_metaURI\",\"type\":\"string\"}],\"name\":\"setProjectMetaURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_teamID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_newBeneficiary\",\"type\":\"address\"}],\"name\":\"setTeamBeneficiary\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_teamName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_metaURI\",\"type\":\"string\"}],\"name\":\"setTeamMetaURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"versionRecipient\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60c060405260056080819052640322e322e360dc1b60a09081526200002891600691906200007f565b503480156200003657600080fd5b50604051620035a1380380620035a1833981016040819052620000599162000125565b600080546001600160a01b0319166001600160a01b039290921691909117905562000192565b8280546200008d9062000155565b90600052602060002090601f016020900481019282620000b15760008555620000fc565b82601f10620000cc57805160ff1916838001178555620000fc565b82800160010185558215620000fc579182015b82811115620000fc578251825591602001919060010190620000df565b506200010a9291506200010e565b5090565b5b808211156200010a57600081556001016200010f565b60006020828403121562000137578081fd5b81516001600160a01b03811681146200014e578182fd5b9392505050565b600181811c908216806200016a57607f821691505b602082108114156200018c57634e487b7160e01b600052602260045260246000fd5b50919050565b6133ff80620001a26000396000f3fe608060405234801561001057600080fd5b50600436106101f05760003560e01c80635b9c29c61161010f578063a6a54ec5116100a2578063cfc5efac11610071578063cfc5efac14610446578063d93379d114610459578063ecb0a33d1461049a578063f8b24915146104ad57600080fd5b8063a6a54ec5146103fa578063b1a5042b1461040d578063b1bc8c8d14610420578063baffd3da1461043357600080fd5b806383dfd03e116100de57806383dfd03e146103ae57806399bb69c1146103c15780639e97c317146103d45780639fe1fb72146103e757600080fd5b80635b9c29c6146103625780635c53709614610375578063600c39111461038857806381ded1501461039b57600080fd5b806347566e4f116101875780634ff3ec60116101565780634ff3ec601461031a57806351de13bf1461032d578063572b6c051461034057806358f700061461021d57600080fd5b806347566e4f146102cc578063486ff0cd146102df5780634ce72c75146102e75780634eec58a3146102fa57600080fd5b806317289818116101c3578063172898181461026657806325ca6b03146102865780632aa2fd641461029957806343417c06146102ac57600080fd5b806301738281146101f5578063052470f41461021d5780630716dfa01461023e57806311bc1ce014610253575b600080fd5b610208610203366004612ea2565b6104c0565b60405190151581526020015b60405180910390f35b61023061022b366004612ec4565b6104e4565b604051908152602001610214565b61025161024c366004612c9f565b610528565b005b610251610261366004612ba3565b6106f3565b610279610274366004612d3a565b610822565b6040516102149190612f6a565b610251610294366004612ba3565b61098b565b6102516102a7366004612a9f565b610aa9565b6102bf6102ba366004612e8a565b610bbb565b6040516102149190613018565b6102bf6102da366004612a3f565b610c55565b6102bf610d6c565b6102796102f5366004612dcf565b610d79565b61030d610308366004612efe565b610ed2565b6040516102149190612fb7565b610251610328366004612c26565b611076565b61025161033b366004612a3f565b6112ad565b61020861034e3660046129a0565b6000546001600160a01b0391821691161490565b610251610370366004612b0f565b611411565b610251610383366004612a9f565b611688565b610208610396366004612ea2565b6117b5565b6102516103a93660046129f4565b6117d0565b61030d6103bc366004612dcf565b6118cc565b6102516103cf366004612ea2565b611aa6565b6102bf6103e2366004612ba3565b611b54565b6102bf6103f53660046129ba565b611c5d565b61030d610408366004612e3f565b611d9b565b6102bf61041b366004612a3f565b611fae565b61027961042e366004612d3a565b6120a7565b610251610441366004612ba3565b6121f7565b610279610454366004612e3f565b612309565b610482610467366004612e8a565b6000908152600260205260409020546001600160a01b031690565b6040516001600160a01b039091168152602001610214565b6102516104a83660046129f4565b61247d565b6102306104bb3660046129ba565b612595565b600082815260026020819052604082206104db9101836125d8565b90505b92915050565b6000828280519060200120604051602001610509929190918252602082015260400190565b60408051601f1981840301815291905280516020909101209392505050565b60008151116105525760405162461bcd60e51b815260040161054990613221565b60405180910390fd5b60008351116105735760405162461bcd60e51b815260040161054990613249565b60008251116105945760405162461bcd60e51b815260040161054990613249565b600061059f85612595565b905060006105ad82866104e4565b905060006105bb82866104e4565b90506105c9836102036125fa565b806105db57506105db826103966125fa565b6106195760405162461bcd60e51b815260206004820152600f60248201526e32b93916b83937b516b6b2b6b132b960891b6044820152606401610549565b6000818152600560205260409020805461063290613347565b1590506106515760405162461bcd60e51b8152600401610549906131f7565b6000818152600560209081526040909120855161067092870190612804565b506000828152600360209081526040822080546001810182559083529181902087516106a3939190910191880190612804565b507f15fb1d214ed195f7210e450a416a0640362c37a0a2d2d0ab63481f967aae0e00878787876106d16125fa565b6040516106e2959493929190613139565b60405180910390a150505050505050565b60006106fe84612595565b9050600061070c82856104e4565b9050600061071a82856104e4565b60008181526005602052604081208054929350909161073890613347565b9050116107575760405162461bcd60e51b815260040161054990613271565b6107766107626125fa565b6000838152600460205260409020906125d8565b156107935760405162461bcd60e51b8152600401610549906131cd565b6107b261079e6125fa565b600083815260046020526040902090612620565b506107d56107be6125fa565b600083815260046020526040902060020190612635565b507fa70c9d49a7ef09401d07a7aad126689c097b80db50504ce9ba5ca8b6f6477fb88686866108026125fa565b60405161081294939291906130e6565b60405180910390a1505050505050565b6060600061082f87612595565b9050600061083d82886104e4565b9050600061084b82886104e4565b905060006108598688613311565b9050600061086787836132f9565b60008481526004602052604090209091506108849060020161264a565b8111156108a85760008381526004602052604090206108a59060020161264a565b90505b60006108b48383613330565b6001600160401b038111156108d957634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610902578160200160208202803683370190505b509050825b8281101561097b57600085815260046020526040902061092a9060020182612654565b826109358684613330565b8151811061095357634e487b7160e01b600052603260045260246000fd5b6001600160a01b039092166020928302919091019091015261097481613382565b9050610907565b509b9a5050505050505050505050565b60008151116109ac5760405162461bcd60e51b815260040161054990613221565b60006109b784612595565b905060006109c582856104e4565b90506109ea6109d26125fa565b600084815260026020819052604090912001906125d8565b610a065760405162461bcd60e51b8152600401610549906132a0565b60008181526005602052604081208054610a1f90613347565b905011610a3e5760405162461bcd60e51b8152600401610549906131a1565b60008181526005602090815260409091208451610a5d92860190612804565b507fd837747757bf732c911148d7c5825d52de171f849e76143eec98fa514e263c8a858585610a8a6125fa565b604051610a9a94939291906130e6565b60405180910390a15050505050565b6000610ab484612595565b90506000610ac282856104e4565b600081815260056020526040812080549293509091610ae090613347565b905011610aff5760405162461bcd60e51b8152600401610549906131a1565b610b0a6109d26125fa565b1515600114610b2b5760405162461bcd60e51b8152600401610549906132a0565b6000818152600360205260409020610b4690600101846125d8565b15610b635760405162461bcd60e51b8152600401610549906131cd565b6000818152600360205260409020610b7e9060010184612620565b507fced6bdcf281bb4d710257a8516d36a47f2d6d4642c8d0af57824cff05d3f300e858585610bab6125fa565b604051610a9a949392919061309c565b60056020526000908152604090208054610bd490613347565b80601f0160208091040260200160405190810160405280929190818152602001828054610c0090613347565b8015610c4d5780601f10610c2257610100808354040283529160200191610c4d565b820191906000526020600020905b815481529060010190602001808311610c3057829003601f168201915b505050505081565b60606000610c6284612595565b90506000610c7082856104e4565b6000818152600360205260409020805491925090610ca05760405162461bcd60e51b8152600401610549906131a1565b80548190610cb090600190613330565b81548110610cce57634e487b7160e01b600052603260045260246000fd5b906000526020600020018054610ce390613347565b80601f0160208091040260200160405190810160405280929190818152602001828054610d0f90613347565b8015610d5c5780601f10610d3157610100808354040283529160200191610d5c565b820191906000526020600020905b815481529060010190602001808311610d3f57829003601f168201915b5050505050935050505092915050565b60068054610bd490613347565b60606000610d8686612595565b90506000610d9482876104e4565b90506000610da28587613311565b90506000610db086836132f9565b6000848152600360205260409020909150610dcd9060010161264a565b811115610df1576000838152600360205260409020610dee9060010161264a565b90505b6000610dfd8383613330565b6001600160401b03811115610e2257634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610e4b578160200160208202803683370190505b509050825b82811015610ec4576000858152600360205260409020610e739060010182612654565b82610e7e8684613330565b81518110610e9c57634e487b7160e01b600052603260045260246000fd5b6001600160a01b0390921660209283029190910190910152610ebd81613382565b9050610e50565b509998505050505050505050565b60606000610ee08385613311565b90506000610eee84836132f9565b600154909150811115610f0057506001545b6000610f0c8383613330565b6001600160401b03811115610f3157634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610f6457816020015b6060815260200190600190039081610f4f5790505b509050825b8281101561106c5760018181548110610f9257634e487b7160e01b600052603260045260246000fd5b906000526020600020018054610fa790613347565b80601f0160208091040260200160405190810160405280929190818152602001828054610fd390613347565b80156110205780601f10610ff557610100808354040283529160200191611020565b820191906000526020600020905b81548152906001019060200180831161100357829003601f168201915b50505050508285836110329190613330565b8151811061105057634e487b7160e01b600052603260045260246000fd5b60200260200101819052508061106590613382565b9050610f69565b5095945050505050565b60008251116110975760405162461bcd60e51b815260040161054990613221565b60008351116110b85760405162461bcd60e51b815260040161054990613249565b60006110c385612595565b905060006110d182866104e4565b90506110df826102036125fa565b6110fb5760405162461bcd60e51b8152600401610549906132a0565b6000818152600560205260409020805461111490613347565b1590506111335760405162461bcd60e51b8152600401610549906131f7565b6000818152600560209081526040909120855161115292870190612804565b50600082815260026020908152604082206001908101805491820181558352918190208751611188939190910191880190612804565b507f11f7f07de1d35c43b47edd8a19e7f8208259cdf66344de81856c5bb7c798db268686866111b56125fa565b6040516111c594939291906130e6565b60405180910390a160005b83518110156112a4576112288482815181106111fc57634e487b7160e01b600052603260045260246000fd5b60200260200101516003600085815260200190815260200160002060010161262090919063ffffffff16565b507fced6bdcf281bb4d710257a8516d36a47f2d6d4642c8d0af57824cff05d3f300e878786848151811061126c57634e487b7160e01b600052603260045260246000fd5b602002602001015161127c6125fa565b60405161128c949392919061309c565b60405180910390a161129d81613382565b90506111d0565b50505050505050565b60008151116112ce5760405162461bcd60e51b815260040161054990613221565b60004683805190602001206040516020016112f3929190918252602082015260400190565b6040516020818303038152906040528051906020012060001c90506113316113196125fa565b600083815260026020819052604090912001906125d8565b61134d5760405162461bcd60e51b8152600401610549906132a0565b6000818152600560205260408120805461136690613347565b9050116113aa5760405162461bcd60e51b8152602060048201526012602482015271195c9c8b5d19585b4b5b9bdd0b595e1a5cdd60721b6044820152606401610549565b600081815260056020908152604090912083516113c992850190612804565b507f337efabade1b5802f3a562a44eb0b3222d30ad7717e865d76f4db7ecbea56e8083836113f56125fa565b6040516114049392919061305e565b60405180910390a1505050565b60008351116114325760405162461bcd60e51b815260040161054990613221565b60008451116114535760405162461bcd60e51b815260040161054990613249565b60008151116114985760405162461bcd60e51b81526020600482015260116024820152706572722d656d7074792d6d656d6265727360781b6044820152606401610549565b60006114a385612595565b60008181526005602052604090208054919250906114c090613347565b1590506114df5760405162461bcd60e51b8152600401610549906131f7565b600081815260056020908152604090912085516114fe92870190612804565b506001805480820182556000919091528551611541917fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf601906020880190612804565b50600081815260026020526040902080546001600160a01b0319166001600160a01b0385161790557f234eb9d37ed58b55e52e99246bb2b0cebb55311292e5d3de44a6df95a9af250185856115946125fa565b6040516115a39392919061305e565b60405180910390a160005b8251811015611680576116068382815181106115da57634e487b7160e01b600052603260045260246000fd5b60200260200101516002600085815260200190815260200160002060020161262090919063ffffffff16565b507f98e10b6306823e1fdc72d0589b2d7b9ebe62196c538882d20daa97c94ce6ba398684838151811061164957634e487b7160e01b600052603260045260246000fd5b60200260200101516116596125fa565b6040516116689392919061302b565b60405180910390a161167981613382565b90506115ae565b505050505050565b600061169384612595565b905060006116a182856104e4565b6000818152600560205260408120805492935090916116bf90613347565b9050116116de5760405162461bcd60e51b8152600401610549906131a1565b6116e96109d26125fa565b151560011461170a5760405162461bcd60e51b8152600401610549906132a0565b600081815260036020526040902061172590600101846125d8565b151560011461176d5760405162461bcd60e51b8152602060048201526014602482015273195c9c8b5b595b58995c8b5b9bdd0b595e1a5cdd60621b6044820152606401610549565b60008181526003602052604090206117889060010184612635565b507fc4d6fb859224b6f607a861ed7c71ab6f509e54dce94d5fc5ca56b54b8d5495aa858585610bab6125fa565b60008281526003602052604081206104db90600101836125d8565b60004683805190602001206040516020016117f5929190918252602082015260400190565b6040516020818303038152906040528051906020012060001c905061181b6113196125fa565b151560011461183c5760405162461bcd60e51b8152600401610549906132a0565b60008181526002602081905260409091206118589101836125d8565b156118755760405162461bcd60e51b8152600401610549906131cd565b6000818152600260208190526040909120611891910183612620565b507f98e10b6306823e1fdc72d0589b2d7b9ebe62196c538882d20daa97c94ce6ba3983836118bd6125fa565b6040516114049392919061302b565b606060006118d986612595565b905060006118e782876104e4565b905060006118f58587613311565b9050600061190386836132f9565b60008481526003602052604090205490915081111561192d57506000828152600360205260409020545b60006119398383613330565b6001600160401b0381111561195e57634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561199157816020015b606081526020019060019003908161197c5790505b509050825b82811015610ec45760008581526003602052604090208054829081106119cc57634e487b7160e01b600052603260045260246000fd5b9060005260206000200180546119e190613347565b80601f0160208091040260200160405190810160405280929190818152602001828054611a0d90613347565b8015611a5a5780601f10611a2f57610100808354040283529160200191611a5a565b820191906000526020600020905b815481529060010190602001808311611a3d57829003601f168201915b5050505050828583611a6c9190613330565b81518110611a8a57634e487b7160e01b600052603260045260246000fd5b602002602001018190525080611a9f90613382565b9050611996565b611ab2826102036125fa565b611ace5760405162461bcd60e51b8152600401610549906132a0565b600082815260026020526040902080546001600160a01b038381166001600160a01b0319831617909255167fee3cd2395369f53e6494e3283648cbb3a49b6dc16a4a85ee5add02f11c160213838284611b256125fa565b604080519485526001600160a01b03938416602086015291831691840191909152166060820152608001611404565b60606000611b6185612595565b90506000611b6f82866104e4565b90506000611b7d82866104e4565b600081815260056020526040812080549293509091611b9b90613347565b905011611bba5760405162461bcd60e51b815260040161054990613271565b60008181526005602052604090208054611bd390613347565b80601f0160208091040260200160405190810160405280929190818152602001828054611bff90613347565b8015611c4c5780601f10611c2157610100808354040283529160200191611c4c565b820191906000526020600020905b815481529060010190602001808311611c2f57829003601f168201915b505050505093505050509392505050565b60606000468380519060200120604051602001611c84929190918252602082015260400190565b60408051601f19818403018152918152815160209283012060008181526005909352908220805491935090611cb890613347565b905011611cfc5760405162461bcd60e51b8152602060048201526012602482015271195c9c8b5d19585b4b5b9bdd0b595e1a5cdd60721b6044820152606401610549565b60008181526005602052604090208054611d1590613347565b80601f0160208091040260200160405190810160405280929190818152602001828054611d4190613347565b8015611d8e5780601f10611d6357610100808354040283529160200191611d8e565b820191906000526020600020905b815481529060010190602001808311611d7157829003601f168201915b5050505050915050919050565b60606000468580519060200120604051602001611dc2929190918252602082015260400190565b60408051601f19818403018152919052805160209091012090506000611de88486613311565b90506000611df685836132f9565b600084815260026020526040902060010154909150811115611e2657506000828152600260205260409020600101545b6000611e328383613330565b6001600160401b03811115611e5757634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611e8a57816020015b6060815260200190600190039081611e755790505b509050825b82811015611fa2576000858152600260205260409020600101805482908110611ec857634e487b7160e01b600052603260045260246000fd5b906000526020600020018054611edd90613347565b80601f0160208091040260200160405190810160405280929190818152602001828054611f0990613347565b8015611f565780601f10611f2b57610100808354040283529160200191611f56565b820191906000526020600020905b815481529060010190602001808311611f3957829003601f168201915b5050505050828583611f689190613330565b81518110611f8657634e487b7160e01b600052603260045260246000fd5b602002602001018190525080611f9b90613382565b9050611e8f565b50979650505050505050565b60606000611fbb84612595565b90506000611fc982856104e4565b600081815260056020526040812080549293509091611fe790613347565b9050116120065760405162461bcd60e51b8152600401610549906131a1565b6000818152600560205260409020805461201f90613347565b80601f016020809104026020016040519081016040528092919081815260200182805461204b90613347565b80156120985780601f1061206d57610100808354040283529160200191612098565b820191906000526020600020905b81548152906001019060200180831161207b57829003601f168201915b50505050509250505092915050565b606060006120b487612595565b905060006120c282886104e4565b905060006120d082886104e4565b905060006120de8688613311565b905060006120ec87836132f9565b60008481526004602052604090209091506121069061264a565b8111156121275760008381526004602052604090206121249061264a565b90505b60006121338383613330565b6001600160401b0381111561215857634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612181578160200160208202803683370190505b509050825b8281101561097b5760008581526004602052604090206121a69082612654565b826121b18684613330565b815181106121cf57634e487b7160e01b600052603260045260246000fd5b6001600160a01b03909216602092830291909101909101526121f081613382565b9050612186565b600061220284612595565b9050600061221082856104e4565b9050600061221e82856104e4565b60008181526005602052604081208054929350909161223c90613347565b90501161225b5760405162461bcd60e51b815260040161054990613271565b61227d6122666125fa565b6000838152600460205260409020600201906125d8565b1561229a5760405162461bcd60e51b8152600401610549906131cd565b6122bc6122a56125fa565b600083815260046020526040902060020190612620565b506122dc6122c86125fa565b600083815260046020526040902090612635565b507f30ca79684c561b1b6fbda88d9779021eb510471ea1df05c10dc39c46d6ed94eb8686866108026125fa565b60606000468580519060200120604051602001612330929190918252602082015260400190565b60408051601f198184030181529190528051602090910120905060006123568486613311565b9050600061236485836132f9565b90506123846002600085815260200190815260200160002060020161264a565b8111156123a95760008381526002602081905260409091206123a6910161264a565b90505b60006123b58383613330565b6001600160401b038111156123da57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015612403578160200160208202803683370190505b509050825b82811015611fa257600085815260026020819052604090912061242c910182612654565b826124378684613330565b8151811061245557634e487b7160e01b600052603260045260246000fd5b6001600160a01b039092166020928302919091019091015261247681613382565b9050612408565b60004683805190602001206040516020016124a2929190918252602082015260400190565b6040516020818303038152906040528051906020012060001c90506124c86113196125fa565b15156001146124e95760405162461bcd60e51b8152600401610549906132a0565b60008181526002602081905260409091206125059101836125d8565b151560011461254d5760405162461bcd60e51b8152602060048201526014602482015273195c9c8b5b595b58995c8b5b9bdd0b595e1a5cdd60621b6044820152606401610549565b6000818152600260208190526040909120612569910183612635565b507fb4cbe992be60a57bec13c1e476783a0869bfeb99857c45d05cfc4dd417f7940a83836118bd6125fa565b60004682805190602001206040516020016125ba929190918252602082015260400190565b60408051601f19818403018152919052805160209091012092915050565b6001600160a01b038116600090815260018301602052604081205415156104db565b600080546001600160a01b031633141561261b575060131936013560601c90565b503390565b60006104db836001600160a01b038416612660565b60006104db836001600160a01b0384166126af565b60006104de825490565b60006104db83836127cc565b60008181526001830160205260408120546126a7575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556104de565b5060006104de565b600081815260018301602052604081205480156127c25760006126d3600183613330565b85549091506000906126e790600190613330565b905081811461276857600086600001828154811061271557634e487b7160e01b600052603260045260246000fd5b906000526020600020015490508087600001848154811061274657634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255918252600188019052604090208390555b855486908061278757634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506104de565b60009150506104de565b60008260000182815481106127f157634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b82805461281090613347565b90600052602060002090601f0160209004810192826128325760008555612878565b82601f1061284b57805160ff1916838001178555612878565b82800160010185558215612878579182015b8281111561287857825182559160200191906001019061285d565b50612884929150612888565b5090565b5b808211156128845760008155600101612889565b80356001600160a01b03811681146128b457600080fd5b919050565b600082601f8301126128c9578081fd5b813560206001600160401b038211156128e4576128e46133b3565b8160051b6128f38282016132c9565b83815282810190868401838801850189101561290d578687fd5b8693505b85841015611fa2576129228161289d565b835260019390930192918401918401612911565b600082601f830112612946578081fd5b81356001600160401b0381111561295f5761295f6133b3565b612972601f8201601f19166020016132c9565b818152846020838601011115612986578283fd5b816020850160208301379081016020019190915292915050565b6000602082840312156129b1578081fd5b6104db8261289d565b6000602082840312156129cb578081fd5b81356001600160401b038111156129e0578182fd5b6129ec84828501612936565b949350505050565b60008060408385031215612a06578081fd5b82356001600160401b03811115612a1b578182fd5b612a2785828601612936565b925050612a366020840161289d565b90509250929050565b60008060408385031215612a51578182fd5b82356001600160401b0380821115612a67578384fd5b612a7386838701612936565b93506020850135915080821115612a88578283fd5b50612a9585828601612936565b9150509250929050565b600080600060608486031215612ab3578081fd5b83356001600160401b0380821115612ac9578283fd5b612ad587838801612936565b94506020860135915080821115612aea578283fd5b50612af786828701612936565b925050612b066040850161289d565b90509250925092565b60008060008060808587031215612b24578081fd5b84356001600160401b0380821115612b3a578283fd5b612b4688838901612936565b95506020870135915080821115612b5b578283fd5b612b6788838901612936565b9450612b756040880161289d565b93506060870135915080821115612b8a578283fd5b50612b97878288016128b9565b91505092959194509250565b600080600060608486031215612bb7578283fd5b83356001600160401b0380821115612bcd578485fd5b612bd987838801612936565b94506020860135915080821115612bee578384fd5b612bfa87838801612936565b93506040860135915080821115612c0f578283fd5b50612c1c86828701612936565b9150509250925092565b60008060008060808587031215612c3b578384fd5b84356001600160401b0380821115612c51578586fd5b612c5d88838901612936565b95506020870135915080821115612c72578485fd5b612c7e88838901612936565b94506040870135915080821115612c93578384fd5b612b7588838901612936565b60008060008060808587031215612cb4578384fd5b84356001600160401b0380821115612cca578586fd5b612cd688838901612936565b95506020870135915080821115612ceb578485fd5b612cf788838901612936565b94506040870135915080821115612d0c578384fd5b612d1888838901612936565b93506060870135915080821115612d2d578283fd5b50612b9787828801612936565b600080600080600060a08688031215612d51578081fd5b85356001600160401b0380821115612d67578283fd5b612d7389838a01612936565b96506020880135915080821115612d88578283fd5b612d9489838a01612936565b95506040880135915080821115612da9578283fd5b50612db688828901612936565b9598949750949560608101359550608001359392505050565b60008060008060808587031215612de4578384fd5b84356001600160401b0380821115612dfa578586fd5b612e0688838901612936565b95506020870135915080821115612e1b578485fd5b50612e2887828801612936565b949794965050505060408301359260600135919050565b600080600060608486031215612e53578081fd5b83356001600160401b03811115612e68578182fd5b612e7486828701612936565b9660208601359650604090950135949350505050565b600060208284031215612e9b578081fd5b5035919050565b60008060408385031215612eb4578182fd5b82359150612a366020840161289d565b60008060408385031215612ed6578182fd5b8235915060208301356001600160401b03811115612ef2578182fd5b612a9585828601612936565b60008060408385031215612f10578182fd5b50508035926020909101359150565b60008151808452815b81811015612f4457602081850181015186830182015201612f28565b81811115612f555782602083870101525b50601f01601f19169290920160200192915050565b6020808252825182820181905260009190848201906040850190845b81811015612fab5783516001600160a01b031683529284019291840191600101612f86565b50909695505050505050565b6000602080830181845280855180835260408601915060408160051b8701019250838701855b8281101561300b57603f19888603018452612ff9858351612f1f565b94509285019290850190600101612fdd565b5092979650505050505050565b6020815260006104db6020830184612f1f565b60608152600061303e6060830186612f1f565b6001600160a01b0394851660208401529290931660409091015292915050565b6060815260006130716060830186612f1f565b82810360208401526130838186612f1f565b91505060018060a01b0383166040830152949350505050565b6080815260006130af6080830187612f1f565b82810360208401526130c18187612f1f565b6001600160a01b03958616604085015293909416606090920191909152509392505050565b6080815260006130f96080830187612f1f565b828103602084015261310b8187612f1f565b9050828103604084015261311f8186612f1f565b91505060018060a01b038316606083015295945050505050565b60a08152600061314c60a0830188612f1f565b828103602084015261315e8188612f1f565b905082810360408401526131728187612f1f565b905082810360608401526131868186612f1f565b91505060018060a01b03831660808301529695505050505050565b602080825260129082015271195c9c8b5c1c9bda8b5b9bdd0b595e1a5cdd60721b604082015260600190565b60208082526010908201526f195c9c8b5b595b58995c8b595e1a5cdd60821b604082015260600190565b60208082526010908201526f195c9c8b5b985b594b58db185a5b595960821b604082015260600190565b6020808252600e908201526d6572722d656d7074792d6d65746160901b604082015260600190565b6020808252600e908201526d6572722d656d7074792d6e616d6560901b604082015260600190565b602080825260159082015274195c9c8b5c995b19585cd94b5b9bdd0b595e1a5cdd605a1b604082015260600190565b6020808252600f908201526e32b93916ba32b0b696b6b2b6b132b960891b604082015260600190565b604051601f8201601f191681016001600160401b03811182821017156132f1576132f16133b3565b604052919050565b6000821982111561330c5761330c61339d565b500190565b600081600019048311821515161561332b5761332b61339d565b500290565b6000828210156133425761334261339d565b500390565b600181811c9082168061335b57607f821691505b6020821081141561337c57634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156133965761339661339d565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220052a7acbfa010e8eb6b7e3c687dac982428a16c2f5e1c388abbc8ea1c3dc1fa264736f6c63430008040033",
}

// ValistABI is the input ABI used to generate the binding from.
// Deprecated: Use ValistMetaData.ABI instead.
var ValistABI = ValistMetaData.ABI

// ValistBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ValistMetaData.Bin instead.
var ValistBin = ValistMetaData.Bin

// DeployValist deploys a new Ethereum contract, binding an instance of Valist to it.
func DeployValist(auth *bind.TransactOpts, backend bind.ContractBackend, _trustedForwarder common.Address) (common.Address, *types.Transaction, *Valist, error) {
	parsed, err := ValistMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ValistBin), backend, _trustedForwarder)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Valist{ValistCaller: ValistCaller{contract: contract}, ValistTransactor: ValistTransactor{contract: contract}, ValistFilterer: ValistFilterer{contract: contract}}, nil
}

// Valist is an auto generated Go binding around an Ethereum contract.
type Valist struct {
	ValistCaller     // Read-only binding to the contract
	ValistTransactor // Write-only binding to the contract
	ValistFilterer   // Log filterer for contract events
}

// ValistCaller is an auto generated read-only Go binding around an Ethereum contract.
type ValistCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValistTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ValistTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValistFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ValistFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ValistSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ValistSession struct {
	Contract     *Valist           // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ValistCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ValistCallerSession struct {
	Contract *ValistCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// ValistTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ValistTransactorSession struct {
	Contract     *ValistTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ValistRaw is an auto generated low-level Go binding around an Ethereum contract.
type ValistRaw struct {
	Contract *Valist // Generic contract binding to access the raw methods on
}

// ValistCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ValistCallerRaw struct {
	Contract *ValistCaller // Generic read-only contract binding to access the raw methods on
}

// ValistTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ValistTransactorRaw struct {
	Contract *ValistTransactor // Generic write-only contract binding to access the raw methods on
}

// NewValist creates a new instance of Valist, bound to a specific deployed contract.
func NewValist(address common.Address, backend bind.ContractBackend) (*Valist, error) {
	contract, err := bindValist(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Valist{ValistCaller: ValistCaller{contract: contract}, ValistTransactor: ValistTransactor{contract: contract}, ValistFilterer: ValistFilterer{contract: contract}}, nil
}

// NewValistCaller creates a new read-only instance of Valist, bound to a specific deployed contract.
func NewValistCaller(address common.Address, caller bind.ContractCaller) (*ValistCaller, error) {
	contract, err := bindValist(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ValistCaller{contract: contract}, nil
}

// NewValistTransactor creates a new write-only instance of Valist, bound to a specific deployed contract.
func NewValistTransactor(address common.Address, transactor bind.ContractTransactor) (*ValistTransactor, error) {
	contract, err := bindValist(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ValistTransactor{contract: contract}, nil
}

// NewValistFilterer creates a new log filterer instance of Valist, bound to a specific deployed contract.
func NewValistFilterer(address common.Address, filterer bind.ContractFilterer) (*ValistFilterer, error) {
	contract, err := bindValist(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ValistFilterer{contract: contract}, nil
}

// bindValist binds a generic wrapper to an already deployed contract.
func bindValist(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ValistABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Valist *ValistRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Valist.Contract.ValistCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Valist *ValistRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Valist.Contract.ValistTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Valist *ValistRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Valist.Contract.ValistTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Valist *ValistCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Valist.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Valist *ValistTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Valist.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Valist *ValistTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Valist.Contract.contract.Transact(opts, method, params...)
}

// GetLatestReleaseName is a free data retrieval call binding the contract method 0x47566e4f.
//
// Solidity: function getLatestReleaseName(string _teamName, string _projectName) view returns(string)
func (_Valist *ValistCaller) GetLatestReleaseName(opts *bind.CallOpts, _teamName string, _projectName string) (string, error) {
	var out []interface{}
	err := _Valist.contract.Call(opts, &out, "getLatestReleaseName", _teamName, _projectName)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetLatestReleaseName is a free data retrieval call binding the contract method 0x47566e4f.
//
// Solidity: function getLatestReleaseName(string _teamName, string _projectName) view returns(string)
func (_Valist *ValistSession) GetLatestReleaseName(_teamName string, _projectName string) (string, error) {
	return _Valist.Contract.GetLatestReleaseName(&_Valist.CallOpts, _teamName, _projectName)
}

// GetLatestReleaseName is a free data retrieval call binding the contract method 0x47566e4f.
//
// Solidity: function getLatestReleaseName(string _teamName, string _projectName) view returns(string)
func (_Valist *ValistCallerSession) GetLatestReleaseName(_teamName string, _projectName string) (string, error) {
	return _Valist.Contract.GetLatestReleaseName(&_Valist.CallOpts, _teamName, _projectName)
}

// GetProjectID is a free data retrieval call binding the contract method 0x58f70006.
//
// Solidity: function getProjectID(uint256 _teamID, string _projectName) pure returns(uint256)
func (_Valist *ValistCaller) GetProjectID(opts *bind.CallOpts, _teamID *big.Int, _projectName string) (*big.Int, error) {
	var out []interface{}
	err := _Valist.contract.Call(opts, &out, "getProjectID", _teamID, _projectName)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetProjectID is a free data retrieval call binding the contract method 0x58f70006.
//
// Solidity: function getProjectID(uint256 _teamID, string _projectName) pure returns(uint256)
func (_Valist *ValistSession) GetProjectID(_teamID *big.Int, _projectName string) (*big.Int, error) {
	return _Valist.Contract.GetProjectID(&_Valist.CallOpts, _teamID, _projectName)
}

// GetProjectID is a free data retrieval call binding the contract method 0x58f70006.
//
// Solidity: function getProjectID(uint256 _teamID, string _projectName) pure returns(uint256)
func (_Valist *ValistCallerSession) GetProjectID(_teamID *big.Int, _projectName string) (*big.Int, error) {
	return _Valist.Contract.GetProjectID(&_Valist.CallOpts, _teamID, _projectName)
}

// GetProjectMembers is a free data retrieval call binding the contract method 0x4ce72c75.
//
// Solidity: function getProjectMembers(string _teamName, string _projectName, uint256 _page, uint256 _size) view returns(address[])
func (_Valist *ValistCaller) GetProjectMembers(opts *bind.CallOpts, _teamName string, _projectName string, _page *big.Int, _size *big.Int) ([]common.Address, error) {
	var out []interface{}
	err := _Valist.contract.Call(opts, &out, "getProjectMembers", _teamName, _projectName, _page, _size)

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetProjectMembers is a free data retrieval call binding the contract method 0x4ce72c75.
//
// Solidity: function getProjectMembers(string _teamName, string _projectName, uint256 _page, uint256 _size) view returns(address[])
func (_Valist *ValistSession) GetProjectMembers(_teamName string, _projectName string, _page *big.Int, _size *big.Int) ([]common.Address, error) {
	return _Valist.Contract.GetProjectMembers(&_Valist.CallOpts, _teamName, _projectName, _page, _size)
}

// GetProjectMembers is a free data retrieval call binding the contract method 0x4ce72c75.
//
// Solidity: function getProjectMembers(string _teamName, string _projectName, uint256 _page, uint256 _size) view returns(address[])
func (_Valist *ValistCallerSession) GetProjectMembers(_teamName string, _projectName string, _page *big.Int, _size *big.Int) ([]common.Address, error) {
	return _Valist.Contract.GetProjectMembers(&_Valist.CallOpts, _teamName, _projectName, _page, _size)
}

// GetProjectMetaURI is a free data retrieval call binding the contract method 0xb1a5042b.
//
// Solidity: function getProjectMetaURI(string _teamName, string _projectName) view returns(string)
func (_Valist *ValistCaller) GetProjectMetaURI(opts *bind.CallOpts, _teamName string, _projectName string) (string, error) {
	var out []interface{}
	err := _Valist.contract.Call(opts, &out, "getProjectMetaURI", _teamName, _projectName)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetProjectMetaURI is a free data retrieval call binding the contract method 0xb1a5042b.
//
// Solidity: function getProjectMetaURI(string _teamName, string _projectName) view returns(string)
func (_Valist *ValistSession) GetProjectMetaURI(_teamName string, _projectName string) (string, error) {
	return _Valist.Contract.GetProjectMetaURI(&_Valist.CallOpts, _teamName, _projectName)
}

// GetProjectMetaURI is a free data retrieval call binding the contract method 0xb1a5042b.
//
// Solidity: function getProjectMetaURI(string _teamName, string _projectName) view returns(string)
func (_Valist *ValistCallerSession) GetProjectMetaURI(_teamName string, _projectName string) (string, error) {
	return _Valist.Contract.GetProjectMetaURI(&_Valist.CallOpts, _teamName, _projectName)
}

// GetProjectNames is a free data retrieval call binding the contract method 0xa6a54ec5.
//
// Solidity: function getProjectNames(string _teamName, uint256 _page, uint256 _size) view returns(string[])
func (_Valist *ValistCaller) GetProjectNames(opts *bind.CallOpts, _teamName string, _page *big.Int, _size *big.Int) ([]string, error) {
	var out []interface{}
	err := _Valist.contract.Call(opts, &out, "getProjectNames", _teamName, _page, _size)

	if err != nil {
		return *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)

	return out0, err

}

// GetProjectNames is a free data retrieval call binding the contract method 0xa6a54ec5.
//
// Solidity: function getProjectNames(string _teamName, uint256 _page, uint256 _size) view returns(string[])
func (_Valist *ValistSession) GetProjectNames(_teamName string, _page *big.Int, _size *big.Int) ([]string, error) {
	return _Valist.Contract.GetProjectNames(&_Valist.CallOpts, _teamName, _page, _size)
}

// GetProjectNames is a free data retrieval call binding the contract method 0xa6a54ec5.
//
// Solidity: function getProjectNames(string _teamName, uint256 _page, uint256 _size) view returns(string[])
func (_Valist *ValistCallerSession) GetProjectNames(_teamName string, _page *big.Int, _size *big.Int) ([]string, error) {
	return _Valist.Contract.GetProjectNames(&_Valist.CallOpts, _teamName, _page, _size)
}

// GetReleaseApprovers is a free data retrieval call binding the contract method 0xb1bc8c8d.
//
// Solidity: function getReleaseApprovers(string _teamName, string _projectName, string _releaseName, uint256 _page, uint256 _size) view returns(address[])
func (_Valist *ValistCaller) GetReleaseApprovers(opts *bind.CallOpts, _teamName string, _projectName string, _releaseName string, _page *big.Int, _size *big.Int) ([]common.Address, error) {
	var out []interface{}
	err := _Valist.contract.Call(opts, &out, "getReleaseApprovers", _teamName, _projectName, _releaseName, _page, _size)

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetReleaseApprovers is a free data retrieval call binding the contract method 0xb1bc8c8d.
//
// Solidity: function getReleaseApprovers(string _teamName, string _projectName, string _releaseName, uint256 _page, uint256 _size) view returns(address[])
func (_Valist *ValistSession) GetReleaseApprovers(_teamName string, _projectName string, _releaseName string, _page *big.Int, _size *big.Int) ([]common.Address, error) {
	return _Valist.Contract.GetReleaseApprovers(&_Valist.CallOpts, _teamName, _projectName, _releaseName, _page, _size)
}

// GetReleaseApprovers is a free data retrieval call binding the contract method 0xb1bc8c8d.
//
// Solidity: function getReleaseApprovers(string _teamName, string _projectName, string _releaseName, uint256 _page, uint256 _size) view returns(address[])
func (_Valist *ValistCallerSession) GetReleaseApprovers(_teamName string, _projectName string, _releaseName string, _page *big.Int, _size *big.Int) ([]common.Address, error) {
	return _Valist.Contract.GetReleaseApprovers(&_Valist.CallOpts, _teamName, _projectName, _releaseName, _page, _size)
}

// GetReleaseID is a free data retrieval call binding the contract method 0x052470f4.
//
// Solidity: function getReleaseID(uint256 _projectID, string _releaseName) pure returns(uint256)
func (_Valist *ValistCaller) GetReleaseID(opts *bind.CallOpts, _projectID *big.Int, _releaseName string) (*big.Int, error) {
	var out []interface{}
	err := _Valist.contract.Call(opts, &out, "getReleaseID", _projectID, _releaseName)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetReleaseID is a free data retrieval call binding the contract method 0x052470f4.
//
// Solidity: function getReleaseID(uint256 _projectID, string _releaseName) pure returns(uint256)
func (_Valist *ValistSession) GetReleaseID(_projectID *big.Int, _releaseName string) (*big.Int, error) {
	return _Valist.Contract.GetReleaseID(&_Valist.CallOpts, _projectID, _releaseName)
}

// GetReleaseID is a free data retrieval call binding the contract method 0x052470f4.
//
// Solidity: function getReleaseID(uint256 _projectID, string _releaseName) pure returns(uint256)
func (_Valist *ValistCallerSession) GetReleaseID(_projectID *big.Int, _releaseName string) (*big.Int, error) {
	return _Valist.Contract.GetReleaseID(&_Valist.CallOpts, _projectID, _releaseName)
}

// GetReleaseMetaURI is a free data retrieval call binding the contract method 0x9e97c317.
//
// Solidity: function getReleaseMetaURI(string _teamName, string _projectName, string _releaseName) view returns(string)
func (_Valist *ValistCaller) GetReleaseMetaURI(opts *bind.CallOpts, _teamName string, _projectName string, _releaseName string) (string, error) {
	var out []interface{}
	err := _Valist.contract.Call(opts, &out, "getReleaseMetaURI", _teamName, _projectName, _releaseName)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetReleaseMetaURI is a free data retrieval call binding the contract method 0x9e97c317.
//
// Solidity: function getReleaseMetaURI(string _teamName, string _projectName, string _releaseName) view returns(string)
func (_Valist *ValistSession) GetReleaseMetaURI(_teamName string, _projectName string, _releaseName string) (string, error) {
	return _Valist.Contract.GetReleaseMetaURI(&_Valist.CallOpts, _teamName, _projectName, _releaseName)
}

// GetReleaseMetaURI is a free data retrieval call binding the contract method 0x9e97c317.
//
// Solidity: function getReleaseMetaURI(string _teamName, string _projectName, string _releaseName) view returns(string)
func (_Valist *ValistCallerSession) GetReleaseMetaURI(_teamName string, _projectName string, _releaseName string) (string, error) {
	return _Valist.Contract.GetReleaseMetaURI(&_Valist.CallOpts, _teamName, _projectName, _releaseName)
}

// GetReleaseNames is a free data retrieval call binding the contract method 0x83dfd03e.
//
// Solidity: function getReleaseNames(string _teamName, string _projectName, uint256 _page, uint256 _size) view returns(string[])
func (_Valist *ValistCaller) GetReleaseNames(opts *bind.CallOpts, _teamName string, _projectName string, _page *big.Int, _size *big.Int) ([]string, error) {
	var out []interface{}
	err := _Valist.contract.Call(opts, &out, "getReleaseNames", _teamName, _projectName, _page, _size)

	if err != nil {
		return *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)

	return out0, err

}

// GetReleaseNames is a free data retrieval call binding the contract method 0x83dfd03e.
//
// Solidity: function getReleaseNames(string _teamName, string _projectName, uint256 _page, uint256 _size) view returns(string[])
func (_Valist *ValistSession) GetReleaseNames(_teamName string, _projectName string, _page *big.Int, _size *big.Int) ([]string, error) {
	return _Valist.Contract.GetReleaseNames(&_Valist.CallOpts, _teamName, _projectName, _page, _size)
}

// GetReleaseNames is a free data retrieval call binding the contract method 0x83dfd03e.
//
// Solidity: function getReleaseNames(string _teamName, string _projectName, uint256 _page, uint256 _size) view returns(string[])
func (_Valist *ValistCallerSession) GetReleaseNames(_teamName string, _projectName string, _page *big.Int, _size *big.Int) ([]string, error) {
	return _Valist.Contract.GetReleaseNames(&_Valist.CallOpts, _teamName, _projectName, _page, _size)
}

// GetReleaseRejectors is a free data retrieval call binding the contract method 0x17289818.
//
// Solidity: function getReleaseRejectors(string _teamName, string _projectName, string _releaseName, uint256 _page, uint256 _size) view returns(address[])
func (_Valist *ValistCaller) GetReleaseRejectors(opts *bind.CallOpts, _teamName string, _projectName string, _releaseName string, _page *big.Int, _size *big.Int) ([]common.Address, error) {
	var out []interface{}
	err := _Valist.contract.Call(opts, &out, "getReleaseRejectors", _teamName, _projectName, _releaseName, _page, _size)

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetReleaseRejectors is a free data retrieval call binding the contract method 0x17289818.
//
// Solidity: function getReleaseRejectors(string _teamName, string _projectName, string _releaseName, uint256 _page, uint256 _size) view returns(address[])
func (_Valist *ValistSession) GetReleaseRejectors(_teamName string, _projectName string, _releaseName string, _page *big.Int, _size *big.Int) ([]common.Address, error) {
	return _Valist.Contract.GetReleaseRejectors(&_Valist.CallOpts, _teamName, _projectName, _releaseName, _page, _size)
}

// GetReleaseRejectors is a free data retrieval call binding the contract method 0x17289818.
//
// Solidity: function getReleaseRejectors(string _teamName, string _projectName, string _releaseName, uint256 _page, uint256 _size) view returns(address[])
func (_Valist *ValistCallerSession) GetReleaseRejectors(_teamName string, _projectName string, _releaseName string, _page *big.Int, _size *big.Int) ([]common.Address, error) {
	return _Valist.Contract.GetReleaseRejectors(&_Valist.CallOpts, _teamName, _projectName, _releaseName, _page, _size)
}

// GetTeamBeneficiary is a free data retrieval call binding the contract method 0xd93379d1.
//
// Solidity: function getTeamBeneficiary(uint256 _teamID) view returns(address)
func (_Valist *ValistCaller) GetTeamBeneficiary(opts *bind.CallOpts, _teamID *big.Int) (common.Address, error) {
	var out []interface{}
	err := _Valist.contract.Call(opts, &out, "getTeamBeneficiary", _teamID)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetTeamBeneficiary is a free data retrieval call binding the contract method 0xd93379d1.
//
// Solidity: function getTeamBeneficiary(uint256 _teamID) view returns(address)
func (_Valist *ValistSession) GetTeamBeneficiary(_teamID *big.Int) (common.Address, error) {
	return _Valist.Contract.GetTeamBeneficiary(&_Valist.CallOpts, _teamID)
}

// GetTeamBeneficiary is a free data retrieval call binding the contract method 0xd93379d1.
//
// Solidity: function getTeamBeneficiary(uint256 _teamID) view returns(address)
func (_Valist *ValistCallerSession) GetTeamBeneficiary(_teamID *big.Int) (common.Address, error) {
	return _Valist.Contract.GetTeamBeneficiary(&_Valist.CallOpts, _teamID)
}

// GetTeamID is a free data retrieval call binding the contract method 0xf8b24915.
//
// Solidity: function getTeamID(string _teamName) view returns(uint256)
func (_Valist *ValistCaller) GetTeamID(opts *bind.CallOpts, _teamName string) (*big.Int, error) {
	var out []interface{}
	err := _Valist.contract.Call(opts, &out, "getTeamID", _teamName)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTeamID is a free data retrieval call binding the contract method 0xf8b24915.
//
// Solidity: function getTeamID(string _teamName) view returns(uint256)
func (_Valist *ValistSession) GetTeamID(_teamName string) (*big.Int, error) {
	return _Valist.Contract.GetTeamID(&_Valist.CallOpts, _teamName)
}

// GetTeamID is a free data retrieval call binding the contract method 0xf8b24915.
//
// Solidity: function getTeamID(string _teamName) view returns(uint256)
func (_Valist *ValistCallerSession) GetTeamID(_teamName string) (*big.Int, error) {
	return _Valist.Contract.GetTeamID(&_Valist.CallOpts, _teamName)
}

// GetTeamMembers is a free data retrieval call binding the contract method 0xcfc5efac.
//
// Solidity: function getTeamMembers(string _teamName, uint256 _page, uint256 _size) view returns(address[])
func (_Valist *ValistCaller) GetTeamMembers(opts *bind.CallOpts, _teamName string, _page *big.Int, _size *big.Int) ([]common.Address, error) {
	var out []interface{}
	err := _Valist.contract.Call(opts, &out, "getTeamMembers", _teamName, _page, _size)

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetTeamMembers is a free data retrieval call binding the contract method 0xcfc5efac.
//
// Solidity: function getTeamMembers(string _teamName, uint256 _page, uint256 _size) view returns(address[])
func (_Valist *ValistSession) GetTeamMembers(_teamName string, _page *big.Int, _size *big.Int) ([]common.Address, error) {
	return _Valist.Contract.GetTeamMembers(&_Valist.CallOpts, _teamName, _page, _size)
}

// GetTeamMembers is a free data retrieval call binding the contract method 0xcfc5efac.
//
// Solidity: function getTeamMembers(string _teamName, uint256 _page, uint256 _size) view returns(address[])
func (_Valist *ValistCallerSession) GetTeamMembers(_teamName string, _page *big.Int, _size *big.Int) ([]common.Address, error) {
	return _Valist.Contract.GetTeamMembers(&_Valist.CallOpts, _teamName, _page, _size)
}

// GetTeamMetaURI is a free data retrieval call binding the contract method 0x9fe1fb72.
//
// Solidity: function getTeamMetaURI(string _teamName) view returns(string)
func (_Valist *ValistCaller) GetTeamMetaURI(opts *bind.CallOpts, _teamName string) (string, error) {
	var out []interface{}
	err := _Valist.contract.Call(opts, &out, "getTeamMetaURI", _teamName)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetTeamMetaURI is a free data retrieval call binding the contract method 0x9fe1fb72.
//
// Solidity: function getTeamMetaURI(string _teamName) view returns(string)
func (_Valist *ValistSession) GetTeamMetaURI(_teamName string) (string, error) {
	return _Valist.Contract.GetTeamMetaURI(&_Valist.CallOpts, _teamName)
}

// GetTeamMetaURI is a free data retrieval call binding the contract method 0x9fe1fb72.
//
// Solidity: function getTeamMetaURI(string _teamName) view returns(string)
func (_Valist *ValistCallerSession) GetTeamMetaURI(_teamName string) (string, error) {
	return _Valist.Contract.GetTeamMetaURI(&_Valist.CallOpts, _teamName)
}

// GetTeamNames is a free data retrieval call binding the contract method 0x4eec58a3.
//
// Solidity: function getTeamNames(uint256 _page, uint256 _size) view returns(string[])
func (_Valist *ValistCaller) GetTeamNames(opts *bind.CallOpts, _page *big.Int, _size *big.Int) ([]string, error) {
	var out []interface{}
	err := _Valist.contract.Call(opts, &out, "getTeamNames", _page, _size)

	if err != nil {
		return *new([]string), err
	}

	out0 := *abi.ConvertType(out[0], new([]string)).(*[]string)

	return out0, err

}

// GetTeamNames is a free data retrieval call binding the contract method 0x4eec58a3.
//
// Solidity: function getTeamNames(uint256 _page, uint256 _size) view returns(string[])
func (_Valist *ValistSession) GetTeamNames(_page *big.Int, _size *big.Int) ([]string, error) {
	return _Valist.Contract.GetTeamNames(&_Valist.CallOpts, _page, _size)
}

// GetTeamNames is a free data retrieval call binding the contract method 0x4eec58a3.
//
// Solidity: function getTeamNames(uint256 _page, uint256 _size) view returns(string[])
func (_Valist *ValistCallerSession) GetTeamNames(_page *big.Int, _size *big.Int) ([]string, error) {
	return _Valist.Contract.GetTeamNames(&_Valist.CallOpts, _page, _size)
}

// IsProjectMember is a free data retrieval call binding the contract method 0x600c3911.
//
// Solidity: function isProjectMember(uint256 _projectID, address _member) view returns(bool)
func (_Valist *ValistCaller) IsProjectMember(opts *bind.CallOpts, _projectID *big.Int, _member common.Address) (bool, error) {
	var out []interface{}
	err := _Valist.contract.Call(opts, &out, "isProjectMember", _projectID, _member)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsProjectMember is a free data retrieval call binding the contract method 0x600c3911.
//
// Solidity: function isProjectMember(uint256 _projectID, address _member) view returns(bool)
func (_Valist *ValistSession) IsProjectMember(_projectID *big.Int, _member common.Address) (bool, error) {
	return _Valist.Contract.IsProjectMember(&_Valist.CallOpts, _projectID, _member)
}

// IsProjectMember is a free data retrieval call binding the contract method 0x600c3911.
//
// Solidity: function isProjectMember(uint256 _projectID, address _member) view returns(bool)
func (_Valist *ValistCallerSession) IsProjectMember(_projectID *big.Int, _member common.Address) (bool, error) {
	return _Valist.Contract.IsProjectMember(&_Valist.CallOpts, _projectID, _member)
}

// IsTeamMember is a free data retrieval call binding the contract method 0x01738281.
//
// Solidity: function isTeamMember(uint256 _teamID, address _member) view returns(bool)
func (_Valist *ValistCaller) IsTeamMember(opts *bind.CallOpts, _teamID *big.Int, _member common.Address) (bool, error) {
	var out []interface{}
	err := _Valist.contract.Call(opts, &out, "isTeamMember", _teamID, _member)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsTeamMember is a free data retrieval call binding the contract method 0x01738281.
//
// Solidity: function isTeamMember(uint256 _teamID, address _member) view returns(bool)
func (_Valist *ValistSession) IsTeamMember(_teamID *big.Int, _member common.Address) (bool, error) {
	return _Valist.Contract.IsTeamMember(&_Valist.CallOpts, _teamID, _member)
}

// IsTeamMember is a free data retrieval call binding the contract method 0x01738281.
//
// Solidity: function isTeamMember(uint256 _teamID, address _member) view returns(bool)
func (_Valist *ValistCallerSession) IsTeamMember(_teamID *big.Int, _member common.Address) (bool, error) {
	return _Valist.Contract.IsTeamMember(&_Valist.CallOpts, _teamID, _member)
}

// IsTrustedForwarder is a free data retrieval call binding the contract method 0x572b6c05.
//
// Solidity: function isTrustedForwarder(address forwarder) view returns(bool)
func (_Valist *ValistCaller) IsTrustedForwarder(opts *bind.CallOpts, forwarder common.Address) (bool, error) {
	var out []interface{}
	err := _Valist.contract.Call(opts, &out, "isTrustedForwarder", forwarder)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsTrustedForwarder is a free data retrieval call binding the contract method 0x572b6c05.
//
// Solidity: function isTrustedForwarder(address forwarder) view returns(bool)
func (_Valist *ValistSession) IsTrustedForwarder(forwarder common.Address) (bool, error) {
	return _Valist.Contract.IsTrustedForwarder(&_Valist.CallOpts, forwarder)
}

// IsTrustedForwarder is a free data retrieval call binding the contract method 0x572b6c05.
//
// Solidity: function isTrustedForwarder(address forwarder) view returns(bool)
func (_Valist *ValistCallerSession) IsTrustedForwarder(forwarder common.Address) (bool, error) {
	return _Valist.Contract.IsTrustedForwarder(&_Valist.CallOpts, forwarder)
}

// MetaByID is a free data retrieval call binding the contract method 0x43417c06.
//
// Solidity: function metaByID(uint256 ) view returns(string)
func (_Valist *ValistCaller) MetaByID(opts *bind.CallOpts, arg0 *big.Int) (string, error) {
	var out []interface{}
	err := _Valist.contract.Call(opts, &out, "metaByID", arg0)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// MetaByID is a free data retrieval call binding the contract method 0x43417c06.
//
// Solidity: function metaByID(uint256 ) view returns(string)
func (_Valist *ValistSession) MetaByID(arg0 *big.Int) (string, error) {
	return _Valist.Contract.MetaByID(&_Valist.CallOpts, arg0)
}

// MetaByID is a free data retrieval call binding the contract method 0x43417c06.
//
// Solidity: function metaByID(uint256 ) view returns(string)
func (_Valist *ValistCallerSession) MetaByID(arg0 *big.Int) (string, error) {
	return _Valist.Contract.MetaByID(&_Valist.CallOpts, arg0)
}

// VersionRecipient is a free data retrieval call binding the contract method 0x486ff0cd.
//
// Solidity: function versionRecipient() view returns(string)
func (_Valist *ValistCaller) VersionRecipient(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Valist.contract.Call(opts, &out, "versionRecipient")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// VersionRecipient is a free data retrieval call binding the contract method 0x486ff0cd.
//
// Solidity: function versionRecipient() view returns(string)
func (_Valist *ValistSession) VersionRecipient() (string, error) {
	return _Valist.Contract.VersionRecipient(&_Valist.CallOpts)
}

// VersionRecipient is a free data retrieval call binding the contract method 0x486ff0cd.
//
// Solidity: function versionRecipient() view returns(string)
func (_Valist *ValistCallerSession) VersionRecipient() (string, error) {
	return _Valist.Contract.VersionRecipient(&_Valist.CallOpts)
}

// AddProjectMember is a paid mutator transaction binding the contract method 0x2aa2fd64.
//
// Solidity: function addProjectMember(string _teamName, string _projectName, address _address) returns()
func (_Valist *ValistTransactor) AddProjectMember(opts *bind.TransactOpts, _teamName string, _projectName string, _address common.Address) (*types.Transaction, error) {
	return _Valist.contract.Transact(opts, "addProjectMember", _teamName, _projectName, _address)
}

// AddProjectMember is a paid mutator transaction binding the contract method 0x2aa2fd64.
//
// Solidity: function addProjectMember(string _teamName, string _projectName, address _address) returns()
func (_Valist *ValistSession) AddProjectMember(_teamName string, _projectName string, _address common.Address) (*types.Transaction, error) {
	return _Valist.Contract.AddProjectMember(&_Valist.TransactOpts, _teamName, _projectName, _address)
}

// AddProjectMember is a paid mutator transaction binding the contract method 0x2aa2fd64.
//
// Solidity: function addProjectMember(string _teamName, string _projectName, address _address) returns()
func (_Valist *ValistTransactorSession) AddProjectMember(_teamName string, _projectName string, _address common.Address) (*types.Transaction, error) {
	return _Valist.Contract.AddProjectMember(&_Valist.TransactOpts, _teamName, _projectName, _address)
}

// AddTeamMember is a paid mutator transaction binding the contract method 0x81ded150.
//
// Solidity: function addTeamMember(string _teamName, address _address) returns()
func (_Valist *ValistTransactor) AddTeamMember(opts *bind.TransactOpts, _teamName string, _address common.Address) (*types.Transaction, error) {
	return _Valist.contract.Transact(opts, "addTeamMember", _teamName, _address)
}

// AddTeamMember is a paid mutator transaction binding the contract method 0x81ded150.
//
// Solidity: function addTeamMember(string _teamName, address _address) returns()
func (_Valist *ValistSession) AddTeamMember(_teamName string, _address common.Address) (*types.Transaction, error) {
	return _Valist.Contract.AddTeamMember(&_Valist.TransactOpts, _teamName, _address)
}

// AddTeamMember is a paid mutator transaction binding the contract method 0x81ded150.
//
// Solidity: function addTeamMember(string _teamName, address _address) returns()
func (_Valist *ValistTransactorSession) AddTeamMember(_teamName string, _address common.Address) (*types.Transaction, error) {
	return _Valist.Contract.AddTeamMember(&_Valist.TransactOpts, _teamName, _address)
}

// ApproveRelease is a paid mutator transaction binding the contract method 0x11bc1ce0.
//
// Solidity: function approveRelease(string _teamName, string _projectName, string _releaseName) returns()
func (_Valist *ValistTransactor) ApproveRelease(opts *bind.TransactOpts, _teamName string, _projectName string, _releaseName string) (*types.Transaction, error) {
	return _Valist.contract.Transact(opts, "approveRelease", _teamName, _projectName, _releaseName)
}

// ApproveRelease is a paid mutator transaction binding the contract method 0x11bc1ce0.
//
// Solidity: function approveRelease(string _teamName, string _projectName, string _releaseName) returns()
func (_Valist *ValistSession) ApproveRelease(_teamName string, _projectName string, _releaseName string) (*types.Transaction, error) {
	return _Valist.Contract.ApproveRelease(&_Valist.TransactOpts, _teamName, _projectName, _releaseName)
}

// ApproveRelease is a paid mutator transaction binding the contract method 0x11bc1ce0.
//
// Solidity: function approveRelease(string _teamName, string _projectName, string _releaseName) returns()
func (_Valist *ValistTransactorSession) ApproveRelease(_teamName string, _projectName string, _releaseName string) (*types.Transaction, error) {
	return _Valist.Contract.ApproveRelease(&_Valist.TransactOpts, _teamName, _projectName, _releaseName)
}

// CreateProject is a paid mutator transaction binding the contract method 0x4ff3ec60.
//
// Solidity: function createProject(string _teamName, string _projectName, string _metaURI, address[] _members) returns()
func (_Valist *ValistTransactor) CreateProject(opts *bind.TransactOpts, _teamName string, _projectName string, _metaURI string, _members []common.Address) (*types.Transaction, error) {
	return _Valist.contract.Transact(opts, "createProject", _teamName, _projectName, _metaURI, _members)
}

// CreateProject is a paid mutator transaction binding the contract method 0x4ff3ec60.
//
// Solidity: function createProject(string _teamName, string _projectName, string _metaURI, address[] _members) returns()
func (_Valist *ValistSession) CreateProject(_teamName string, _projectName string, _metaURI string, _members []common.Address) (*types.Transaction, error) {
	return _Valist.Contract.CreateProject(&_Valist.TransactOpts, _teamName, _projectName, _metaURI, _members)
}

// CreateProject is a paid mutator transaction binding the contract method 0x4ff3ec60.
//
// Solidity: function createProject(string _teamName, string _projectName, string _metaURI, address[] _members) returns()
func (_Valist *ValistTransactorSession) CreateProject(_teamName string, _projectName string, _metaURI string, _members []common.Address) (*types.Transaction, error) {
	return _Valist.Contract.CreateProject(&_Valist.TransactOpts, _teamName, _projectName, _metaURI, _members)
}

// CreateRelease is a paid mutator transaction binding the contract method 0x0716dfa0.
//
// Solidity: function createRelease(string _teamName, string _projectName, string _releaseName, string _metaURI) returns()
func (_Valist *ValistTransactor) CreateRelease(opts *bind.TransactOpts, _teamName string, _projectName string, _releaseName string, _metaURI string) (*types.Transaction, error) {
	return _Valist.contract.Transact(opts, "createRelease", _teamName, _projectName, _releaseName, _metaURI)
}

// CreateRelease is a paid mutator transaction binding the contract method 0x0716dfa0.
//
// Solidity: function createRelease(string _teamName, string _projectName, string _releaseName, string _metaURI) returns()
func (_Valist *ValistSession) CreateRelease(_teamName string, _projectName string, _releaseName string, _metaURI string) (*types.Transaction, error) {
	return _Valist.Contract.CreateRelease(&_Valist.TransactOpts, _teamName, _projectName, _releaseName, _metaURI)
}

// CreateRelease is a paid mutator transaction binding the contract method 0x0716dfa0.
//
// Solidity: function createRelease(string _teamName, string _projectName, string _releaseName, string _metaURI) returns()
func (_Valist *ValistTransactorSession) CreateRelease(_teamName string, _projectName string, _releaseName string, _metaURI string) (*types.Transaction, error) {
	return _Valist.Contract.CreateRelease(&_Valist.TransactOpts, _teamName, _projectName, _releaseName, _metaURI)
}

// CreateTeam is a paid mutator transaction binding the contract method 0x5b9c29c6.
//
// Solidity: function createTeam(string _teamName, string _metaURI, address _beneficiary, address[] _members) returns()
func (_Valist *ValistTransactor) CreateTeam(opts *bind.TransactOpts, _teamName string, _metaURI string, _beneficiary common.Address, _members []common.Address) (*types.Transaction, error) {
	return _Valist.contract.Transact(opts, "createTeam", _teamName, _metaURI, _beneficiary, _members)
}

// CreateTeam is a paid mutator transaction binding the contract method 0x5b9c29c6.
//
// Solidity: function createTeam(string _teamName, string _metaURI, address _beneficiary, address[] _members) returns()
func (_Valist *ValistSession) CreateTeam(_teamName string, _metaURI string, _beneficiary common.Address, _members []common.Address) (*types.Transaction, error) {
	return _Valist.Contract.CreateTeam(&_Valist.TransactOpts, _teamName, _metaURI, _beneficiary, _members)
}

// CreateTeam is a paid mutator transaction binding the contract method 0x5b9c29c6.
//
// Solidity: function createTeam(string _teamName, string _metaURI, address _beneficiary, address[] _members) returns()
func (_Valist *ValistTransactorSession) CreateTeam(_teamName string, _metaURI string, _beneficiary common.Address, _members []common.Address) (*types.Transaction, error) {
	return _Valist.Contract.CreateTeam(&_Valist.TransactOpts, _teamName, _metaURI, _beneficiary, _members)
}

// RejectRelease is a paid mutator transaction binding the contract method 0xbaffd3da.
//
// Solidity: function rejectRelease(string _teamName, string _projectName, string _releaseName) returns()
func (_Valist *ValistTransactor) RejectRelease(opts *bind.TransactOpts, _teamName string, _projectName string, _releaseName string) (*types.Transaction, error) {
	return _Valist.contract.Transact(opts, "rejectRelease", _teamName, _projectName, _releaseName)
}

// RejectRelease is a paid mutator transaction binding the contract method 0xbaffd3da.
//
// Solidity: function rejectRelease(string _teamName, string _projectName, string _releaseName) returns()
func (_Valist *ValistSession) RejectRelease(_teamName string, _projectName string, _releaseName string) (*types.Transaction, error) {
	return _Valist.Contract.RejectRelease(&_Valist.TransactOpts, _teamName, _projectName, _releaseName)
}

// RejectRelease is a paid mutator transaction binding the contract method 0xbaffd3da.
//
// Solidity: function rejectRelease(string _teamName, string _projectName, string _releaseName) returns()
func (_Valist *ValistTransactorSession) RejectRelease(_teamName string, _projectName string, _releaseName string) (*types.Transaction, error) {
	return _Valist.Contract.RejectRelease(&_Valist.TransactOpts, _teamName, _projectName, _releaseName)
}

// RemoveProjectMember is a paid mutator transaction binding the contract method 0x5c537096.
//
// Solidity: function removeProjectMember(string _teamName, string _projectName, address _address) returns()
func (_Valist *ValistTransactor) RemoveProjectMember(opts *bind.TransactOpts, _teamName string, _projectName string, _address common.Address) (*types.Transaction, error) {
	return _Valist.contract.Transact(opts, "removeProjectMember", _teamName, _projectName, _address)
}

// RemoveProjectMember is a paid mutator transaction binding the contract method 0x5c537096.
//
// Solidity: function removeProjectMember(string _teamName, string _projectName, address _address) returns()
func (_Valist *ValistSession) RemoveProjectMember(_teamName string, _projectName string, _address common.Address) (*types.Transaction, error) {
	return _Valist.Contract.RemoveProjectMember(&_Valist.TransactOpts, _teamName, _projectName, _address)
}

// RemoveProjectMember is a paid mutator transaction binding the contract method 0x5c537096.
//
// Solidity: function removeProjectMember(string _teamName, string _projectName, address _address) returns()
func (_Valist *ValistTransactorSession) RemoveProjectMember(_teamName string, _projectName string, _address common.Address) (*types.Transaction, error) {
	return _Valist.Contract.RemoveProjectMember(&_Valist.TransactOpts, _teamName, _projectName, _address)
}

// RemoveTeamMember is a paid mutator transaction binding the contract method 0xecb0a33d.
//
// Solidity: function removeTeamMember(string _teamName, address _address) returns()
func (_Valist *ValistTransactor) RemoveTeamMember(opts *bind.TransactOpts, _teamName string, _address common.Address) (*types.Transaction, error) {
	return _Valist.contract.Transact(opts, "removeTeamMember", _teamName, _address)
}

// RemoveTeamMember is a paid mutator transaction binding the contract method 0xecb0a33d.
//
// Solidity: function removeTeamMember(string _teamName, address _address) returns()
func (_Valist *ValistSession) RemoveTeamMember(_teamName string, _address common.Address) (*types.Transaction, error) {
	return _Valist.Contract.RemoveTeamMember(&_Valist.TransactOpts, _teamName, _address)
}

// RemoveTeamMember is a paid mutator transaction binding the contract method 0xecb0a33d.
//
// Solidity: function removeTeamMember(string _teamName, address _address) returns()
func (_Valist *ValistTransactorSession) RemoveTeamMember(_teamName string, _address common.Address) (*types.Transaction, error) {
	return _Valist.Contract.RemoveTeamMember(&_Valist.TransactOpts, _teamName, _address)
}

// SetProjectMetaURI is a paid mutator transaction binding the contract method 0x25ca6b03.
//
// Solidity: function setProjectMetaURI(string _teamName, string _projectName, string _metaURI) returns()
func (_Valist *ValistTransactor) SetProjectMetaURI(opts *bind.TransactOpts, _teamName string, _projectName string, _metaURI string) (*types.Transaction, error) {
	return _Valist.contract.Transact(opts, "setProjectMetaURI", _teamName, _projectName, _metaURI)
}

// SetProjectMetaURI is a paid mutator transaction binding the contract method 0x25ca6b03.
//
// Solidity: function setProjectMetaURI(string _teamName, string _projectName, string _metaURI) returns()
func (_Valist *ValistSession) SetProjectMetaURI(_teamName string, _projectName string, _metaURI string) (*types.Transaction, error) {
	return _Valist.Contract.SetProjectMetaURI(&_Valist.TransactOpts, _teamName, _projectName, _metaURI)
}

// SetProjectMetaURI is a paid mutator transaction binding the contract method 0x25ca6b03.
//
// Solidity: function setProjectMetaURI(string _teamName, string _projectName, string _metaURI) returns()
func (_Valist *ValistTransactorSession) SetProjectMetaURI(_teamName string, _projectName string, _metaURI string) (*types.Transaction, error) {
	return _Valist.Contract.SetProjectMetaURI(&_Valist.TransactOpts, _teamName, _projectName, _metaURI)
}

// SetTeamBeneficiary is a paid mutator transaction binding the contract method 0x99bb69c1.
//
// Solidity: function setTeamBeneficiary(uint256 _teamID, address _newBeneficiary) returns()
func (_Valist *ValistTransactor) SetTeamBeneficiary(opts *bind.TransactOpts, _teamID *big.Int, _newBeneficiary common.Address) (*types.Transaction, error) {
	return _Valist.contract.Transact(opts, "setTeamBeneficiary", _teamID, _newBeneficiary)
}

// SetTeamBeneficiary is a paid mutator transaction binding the contract method 0x99bb69c1.
//
// Solidity: function setTeamBeneficiary(uint256 _teamID, address _newBeneficiary) returns()
func (_Valist *ValistSession) SetTeamBeneficiary(_teamID *big.Int, _newBeneficiary common.Address) (*types.Transaction, error) {
	return _Valist.Contract.SetTeamBeneficiary(&_Valist.TransactOpts, _teamID, _newBeneficiary)
}

// SetTeamBeneficiary is a paid mutator transaction binding the contract method 0x99bb69c1.
//
// Solidity: function setTeamBeneficiary(uint256 _teamID, address _newBeneficiary) returns()
func (_Valist *ValistTransactorSession) SetTeamBeneficiary(_teamID *big.Int, _newBeneficiary common.Address) (*types.Transaction, error) {
	return _Valist.Contract.SetTeamBeneficiary(&_Valist.TransactOpts, _teamID, _newBeneficiary)
}

// SetTeamMetaURI is a paid mutator transaction binding the contract method 0x51de13bf.
//
// Solidity: function setTeamMetaURI(string _teamName, string _metaURI) returns()
func (_Valist *ValistTransactor) SetTeamMetaURI(opts *bind.TransactOpts, _teamName string, _metaURI string) (*types.Transaction, error) {
	return _Valist.contract.Transact(opts, "setTeamMetaURI", _teamName, _metaURI)
}

// SetTeamMetaURI is a paid mutator transaction binding the contract method 0x51de13bf.
//
// Solidity: function setTeamMetaURI(string _teamName, string _metaURI) returns()
func (_Valist *ValistSession) SetTeamMetaURI(_teamName string, _metaURI string) (*types.Transaction, error) {
	return _Valist.Contract.SetTeamMetaURI(&_Valist.TransactOpts, _teamName, _metaURI)
}

// SetTeamMetaURI is a paid mutator transaction binding the contract method 0x51de13bf.
//
// Solidity: function setTeamMetaURI(string _teamName, string _metaURI) returns()
func (_Valist *ValistTransactorSession) SetTeamMetaURI(_teamName string, _metaURI string) (*types.Transaction, error) {
	return _Valist.Contract.SetTeamMetaURI(&_Valist.TransactOpts, _teamName, _metaURI)
}

// ValistProjectCreatedIterator is returned from FilterProjectCreated and is used to iterate over the raw logs and unpacked data for ProjectCreated events raised by the Valist contract.
type ValistProjectCreatedIterator struct {
	Event *ValistProjectCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValistProjectCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValistProjectCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValistProjectCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValistProjectCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValistProjectCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValistProjectCreated represents a ProjectCreated event raised by the Valist contract.
type ValistProjectCreated struct {
	TeamName    string
	ProjectName string
	MetaURI     string
	Sender      common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterProjectCreated is a free log retrieval operation binding the contract event 0x11f7f07de1d35c43b47edd8a19e7f8208259cdf66344de81856c5bb7c798db26.
//
// Solidity: event ProjectCreated(string _teamName, string _projectName, string _metaURI, address _sender)
func (_Valist *ValistFilterer) FilterProjectCreated(opts *bind.FilterOpts) (*ValistProjectCreatedIterator, error) {

	logs, sub, err := _Valist.contract.FilterLogs(opts, "ProjectCreated")
	if err != nil {
		return nil, err
	}
	return &ValistProjectCreatedIterator{contract: _Valist.contract, event: "ProjectCreated", logs: logs, sub: sub}, nil
}

// WatchProjectCreated is a free log subscription operation binding the contract event 0x11f7f07de1d35c43b47edd8a19e7f8208259cdf66344de81856c5bb7c798db26.
//
// Solidity: event ProjectCreated(string _teamName, string _projectName, string _metaURI, address _sender)
func (_Valist *ValistFilterer) WatchProjectCreated(opts *bind.WatchOpts, sink chan<- *ValistProjectCreated) (event.Subscription, error) {

	logs, sub, err := _Valist.contract.WatchLogs(opts, "ProjectCreated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValistProjectCreated)
				if err := _Valist.contract.UnpackLog(event, "ProjectCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseProjectCreated is a log parse operation binding the contract event 0x11f7f07de1d35c43b47edd8a19e7f8208259cdf66344de81856c5bb7c798db26.
//
// Solidity: event ProjectCreated(string _teamName, string _projectName, string _metaURI, address _sender)
func (_Valist *ValistFilterer) ParseProjectCreated(log types.Log) (*ValistProjectCreated, error) {
	event := new(ValistProjectCreated)
	if err := _Valist.contract.UnpackLog(event, "ProjectCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValistProjectMemberAddedIterator is returned from FilterProjectMemberAdded and is used to iterate over the raw logs and unpacked data for ProjectMemberAdded events raised by the Valist contract.
type ValistProjectMemberAddedIterator struct {
	Event *ValistProjectMemberAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValistProjectMemberAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValistProjectMemberAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValistProjectMemberAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValistProjectMemberAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValistProjectMemberAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValistProjectMemberAdded represents a ProjectMemberAdded event raised by the Valist contract.
type ValistProjectMemberAdded struct {
	TeamName    string
	ProjectName string
	Member      common.Address
	Sender      common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterProjectMemberAdded is a free log retrieval operation binding the contract event 0xced6bdcf281bb4d710257a8516d36a47f2d6d4642c8d0af57824cff05d3f300e.
//
// Solidity: event ProjectMemberAdded(string _teamName, string _projectName, address _member, address _sender)
func (_Valist *ValistFilterer) FilterProjectMemberAdded(opts *bind.FilterOpts) (*ValistProjectMemberAddedIterator, error) {

	logs, sub, err := _Valist.contract.FilterLogs(opts, "ProjectMemberAdded")
	if err != nil {
		return nil, err
	}
	return &ValistProjectMemberAddedIterator{contract: _Valist.contract, event: "ProjectMemberAdded", logs: logs, sub: sub}, nil
}

// WatchProjectMemberAdded is a free log subscription operation binding the contract event 0xced6bdcf281bb4d710257a8516d36a47f2d6d4642c8d0af57824cff05d3f300e.
//
// Solidity: event ProjectMemberAdded(string _teamName, string _projectName, address _member, address _sender)
func (_Valist *ValistFilterer) WatchProjectMemberAdded(opts *bind.WatchOpts, sink chan<- *ValistProjectMemberAdded) (event.Subscription, error) {

	logs, sub, err := _Valist.contract.WatchLogs(opts, "ProjectMemberAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValistProjectMemberAdded)
				if err := _Valist.contract.UnpackLog(event, "ProjectMemberAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseProjectMemberAdded is a log parse operation binding the contract event 0xced6bdcf281bb4d710257a8516d36a47f2d6d4642c8d0af57824cff05d3f300e.
//
// Solidity: event ProjectMemberAdded(string _teamName, string _projectName, address _member, address _sender)
func (_Valist *ValistFilterer) ParseProjectMemberAdded(log types.Log) (*ValistProjectMemberAdded, error) {
	event := new(ValistProjectMemberAdded)
	if err := _Valist.contract.UnpackLog(event, "ProjectMemberAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValistProjectMemberRemovedIterator is returned from FilterProjectMemberRemoved and is used to iterate over the raw logs and unpacked data for ProjectMemberRemoved events raised by the Valist contract.
type ValistProjectMemberRemovedIterator struct {
	Event *ValistProjectMemberRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValistProjectMemberRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValistProjectMemberRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValistProjectMemberRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValistProjectMemberRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValistProjectMemberRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValistProjectMemberRemoved represents a ProjectMemberRemoved event raised by the Valist contract.
type ValistProjectMemberRemoved struct {
	TeamName    string
	ProjectName string
	Member      common.Address
	Sender      common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterProjectMemberRemoved is a free log retrieval operation binding the contract event 0xc4d6fb859224b6f607a861ed7c71ab6f509e54dce94d5fc5ca56b54b8d5495aa.
//
// Solidity: event ProjectMemberRemoved(string _teamName, string _projectName, address _member, address _sender)
func (_Valist *ValistFilterer) FilterProjectMemberRemoved(opts *bind.FilterOpts) (*ValistProjectMemberRemovedIterator, error) {

	logs, sub, err := _Valist.contract.FilterLogs(opts, "ProjectMemberRemoved")
	if err != nil {
		return nil, err
	}
	return &ValistProjectMemberRemovedIterator{contract: _Valist.contract, event: "ProjectMemberRemoved", logs: logs, sub: sub}, nil
}

// WatchProjectMemberRemoved is a free log subscription operation binding the contract event 0xc4d6fb859224b6f607a861ed7c71ab6f509e54dce94d5fc5ca56b54b8d5495aa.
//
// Solidity: event ProjectMemberRemoved(string _teamName, string _projectName, address _member, address _sender)
func (_Valist *ValistFilterer) WatchProjectMemberRemoved(opts *bind.WatchOpts, sink chan<- *ValistProjectMemberRemoved) (event.Subscription, error) {

	logs, sub, err := _Valist.contract.WatchLogs(opts, "ProjectMemberRemoved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValistProjectMemberRemoved)
				if err := _Valist.contract.UnpackLog(event, "ProjectMemberRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseProjectMemberRemoved is a log parse operation binding the contract event 0xc4d6fb859224b6f607a861ed7c71ab6f509e54dce94d5fc5ca56b54b8d5495aa.
//
// Solidity: event ProjectMemberRemoved(string _teamName, string _projectName, address _member, address _sender)
func (_Valist *ValistFilterer) ParseProjectMemberRemoved(log types.Log) (*ValistProjectMemberRemoved, error) {
	event := new(ValistProjectMemberRemoved)
	if err := _Valist.contract.UnpackLog(event, "ProjectMemberRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValistProjectUpdatedIterator is returned from FilterProjectUpdated and is used to iterate over the raw logs and unpacked data for ProjectUpdated events raised by the Valist contract.
type ValistProjectUpdatedIterator struct {
	Event *ValistProjectUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValistProjectUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValistProjectUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValistProjectUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValistProjectUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValistProjectUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValistProjectUpdated represents a ProjectUpdated event raised by the Valist contract.
type ValistProjectUpdated struct {
	TeamName    string
	ProjectName string
	MetaURI     string
	Sender      common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterProjectUpdated is a free log retrieval operation binding the contract event 0xd837747757bf732c911148d7c5825d52de171f849e76143eec98fa514e263c8a.
//
// Solidity: event ProjectUpdated(string _teamName, string _projectName, string _metaURI, address _sender)
func (_Valist *ValistFilterer) FilterProjectUpdated(opts *bind.FilterOpts) (*ValistProjectUpdatedIterator, error) {

	logs, sub, err := _Valist.contract.FilterLogs(opts, "ProjectUpdated")
	if err != nil {
		return nil, err
	}
	return &ValistProjectUpdatedIterator{contract: _Valist.contract, event: "ProjectUpdated", logs: logs, sub: sub}, nil
}

// WatchProjectUpdated is a free log subscription operation binding the contract event 0xd837747757bf732c911148d7c5825d52de171f849e76143eec98fa514e263c8a.
//
// Solidity: event ProjectUpdated(string _teamName, string _projectName, string _metaURI, address _sender)
func (_Valist *ValistFilterer) WatchProjectUpdated(opts *bind.WatchOpts, sink chan<- *ValistProjectUpdated) (event.Subscription, error) {

	logs, sub, err := _Valist.contract.WatchLogs(opts, "ProjectUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValistProjectUpdated)
				if err := _Valist.contract.UnpackLog(event, "ProjectUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseProjectUpdated is a log parse operation binding the contract event 0xd837747757bf732c911148d7c5825d52de171f849e76143eec98fa514e263c8a.
//
// Solidity: event ProjectUpdated(string _teamName, string _projectName, string _metaURI, address _sender)
func (_Valist *ValistFilterer) ParseProjectUpdated(log types.Log) (*ValistProjectUpdated, error) {
	event := new(ValistProjectUpdated)
	if err := _Valist.contract.UnpackLog(event, "ProjectUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValistReleaseApprovedIterator is returned from FilterReleaseApproved and is used to iterate over the raw logs and unpacked data for ReleaseApproved events raised by the Valist contract.
type ValistReleaseApprovedIterator struct {
	Event *ValistReleaseApproved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValistReleaseApprovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValistReleaseApproved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValistReleaseApproved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValistReleaseApprovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValistReleaseApprovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValistReleaseApproved represents a ReleaseApproved event raised by the Valist contract.
type ValistReleaseApproved struct {
	TeamName    string
	ProjectName string
	ReleaseName string
	Sender      common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterReleaseApproved is a free log retrieval operation binding the contract event 0xa70c9d49a7ef09401d07a7aad126689c097b80db50504ce9ba5ca8b6f6477fb8.
//
// Solidity: event ReleaseApproved(string _teamName, string _projectName, string _releaseName, address _sender)
func (_Valist *ValistFilterer) FilterReleaseApproved(opts *bind.FilterOpts) (*ValistReleaseApprovedIterator, error) {

	logs, sub, err := _Valist.contract.FilterLogs(opts, "ReleaseApproved")
	if err != nil {
		return nil, err
	}
	return &ValistReleaseApprovedIterator{contract: _Valist.contract, event: "ReleaseApproved", logs: logs, sub: sub}, nil
}

// WatchReleaseApproved is a free log subscription operation binding the contract event 0xa70c9d49a7ef09401d07a7aad126689c097b80db50504ce9ba5ca8b6f6477fb8.
//
// Solidity: event ReleaseApproved(string _teamName, string _projectName, string _releaseName, address _sender)
func (_Valist *ValistFilterer) WatchReleaseApproved(opts *bind.WatchOpts, sink chan<- *ValistReleaseApproved) (event.Subscription, error) {

	logs, sub, err := _Valist.contract.WatchLogs(opts, "ReleaseApproved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValistReleaseApproved)
				if err := _Valist.contract.UnpackLog(event, "ReleaseApproved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseReleaseApproved is a log parse operation binding the contract event 0xa70c9d49a7ef09401d07a7aad126689c097b80db50504ce9ba5ca8b6f6477fb8.
//
// Solidity: event ReleaseApproved(string _teamName, string _projectName, string _releaseName, address _sender)
func (_Valist *ValistFilterer) ParseReleaseApproved(log types.Log) (*ValistReleaseApproved, error) {
	event := new(ValistReleaseApproved)
	if err := _Valist.contract.UnpackLog(event, "ReleaseApproved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValistReleaseCreatedIterator is returned from FilterReleaseCreated and is used to iterate over the raw logs and unpacked data for ReleaseCreated events raised by the Valist contract.
type ValistReleaseCreatedIterator struct {
	Event *ValistReleaseCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValistReleaseCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValistReleaseCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValistReleaseCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValistReleaseCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValistReleaseCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValistReleaseCreated represents a ReleaseCreated event raised by the Valist contract.
type ValistReleaseCreated struct {
	TeamName    string
	ProjectName string
	ReleaseName string
	MetaURI     string
	Sender      common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterReleaseCreated is a free log retrieval operation binding the contract event 0x15fb1d214ed195f7210e450a416a0640362c37a0a2d2d0ab63481f967aae0e00.
//
// Solidity: event ReleaseCreated(string _teamName, string _projectName, string _releaseName, string _metaURI, address _sender)
func (_Valist *ValistFilterer) FilterReleaseCreated(opts *bind.FilterOpts) (*ValistReleaseCreatedIterator, error) {

	logs, sub, err := _Valist.contract.FilterLogs(opts, "ReleaseCreated")
	if err != nil {
		return nil, err
	}
	return &ValistReleaseCreatedIterator{contract: _Valist.contract, event: "ReleaseCreated", logs: logs, sub: sub}, nil
}

// WatchReleaseCreated is a free log subscription operation binding the contract event 0x15fb1d214ed195f7210e450a416a0640362c37a0a2d2d0ab63481f967aae0e00.
//
// Solidity: event ReleaseCreated(string _teamName, string _projectName, string _releaseName, string _metaURI, address _sender)
func (_Valist *ValistFilterer) WatchReleaseCreated(opts *bind.WatchOpts, sink chan<- *ValistReleaseCreated) (event.Subscription, error) {

	logs, sub, err := _Valist.contract.WatchLogs(opts, "ReleaseCreated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValistReleaseCreated)
				if err := _Valist.contract.UnpackLog(event, "ReleaseCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseReleaseCreated is a log parse operation binding the contract event 0x15fb1d214ed195f7210e450a416a0640362c37a0a2d2d0ab63481f967aae0e00.
//
// Solidity: event ReleaseCreated(string _teamName, string _projectName, string _releaseName, string _metaURI, address _sender)
func (_Valist *ValistFilterer) ParseReleaseCreated(log types.Log) (*ValistReleaseCreated, error) {
	event := new(ValistReleaseCreated)
	if err := _Valist.contract.UnpackLog(event, "ReleaseCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValistReleaseRejectedIterator is returned from FilterReleaseRejected and is used to iterate over the raw logs and unpacked data for ReleaseRejected events raised by the Valist contract.
type ValistReleaseRejectedIterator struct {
	Event *ValistReleaseRejected // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValistReleaseRejectedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValistReleaseRejected)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValistReleaseRejected)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValistReleaseRejectedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValistReleaseRejectedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValistReleaseRejected represents a ReleaseRejected event raised by the Valist contract.
type ValistReleaseRejected struct {
	TeamName    string
	ProjectName string
	ReleaseName string
	Sender      common.Address
	Raw         types.Log // Blockchain specific contextual infos
}

// FilterReleaseRejected is a free log retrieval operation binding the contract event 0x30ca79684c561b1b6fbda88d9779021eb510471ea1df05c10dc39c46d6ed94eb.
//
// Solidity: event ReleaseRejected(string _teamName, string _projectName, string _releaseName, address _sender)
func (_Valist *ValistFilterer) FilterReleaseRejected(opts *bind.FilterOpts) (*ValistReleaseRejectedIterator, error) {

	logs, sub, err := _Valist.contract.FilterLogs(opts, "ReleaseRejected")
	if err != nil {
		return nil, err
	}
	return &ValistReleaseRejectedIterator{contract: _Valist.contract, event: "ReleaseRejected", logs: logs, sub: sub}, nil
}

// WatchReleaseRejected is a free log subscription operation binding the contract event 0x30ca79684c561b1b6fbda88d9779021eb510471ea1df05c10dc39c46d6ed94eb.
//
// Solidity: event ReleaseRejected(string _teamName, string _projectName, string _releaseName, address _sender)
func (_Valist *ValistFilterer) WatchReleaseRejected(opts *bind.WatchOpts, sink chan<- *ValistReleaseRejected) (event.Subscription, error) {

	logs, sub, err := _Valist.contract.WatchLogs(opts, "ReleaseRejected")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValistReleaseRejected)
				if err := _Valist.contract.UnpackLog(event, "ReleaseRejected", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseReleaseRejected is a log parse operation binding the contract event 0x30ca79684c561b1b6fbda88d9779021eb510471ea1df05c10dc39c46d6ed94eb.
//
// Solidity: event ReleaseRejected(string _teamName, string _projectName, string _releaseName, address _sender)
func (_Valist *ValistFilterer) ParseReleaseRejected(log types.Log) (*ValistReleaseRejected, error) {
	event := new(ValistReleaseRejected)
	if err := _Valist.contract.UnpackLog(event, "ReleaseRejected", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValistTeamBeneficiaryUpdatedIterator is returned from FilterTeamBeneficiaryUpdated and is used to iterate over the raw logs and unpacked data for TeamBeneficiaryUpdated events raised by the Valist contract.
type ValistTeamBeneficiaryUpdatedIterator struct {
	Event *ValistTeamBeneficiaryUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValistTeamBeneficiaryUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValistTeamBeneficiaryUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValistTeamBeneficiaryUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValistTeamBeneficiaryUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValistTeamBeneficiaryUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValistTeamBeneficiaryUpdated represents a TeamBeneficiaryUpdated event raised by the Valist contract.
type ValistTeamBeneficiaryUpdated struct {
	TeamID         *big.Int
	OldBeneficiary common.Address
	NewBeneficiary common.Address
	Sender         common.Address
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterTeamBeneficiaryUpdated is a free log retrieval operation binding the contract event 0xee3cd2395369f53e6494e3283648cbb3a49b6dc16a4a85ee5add02f11c160213.
//
// Solidity: event TeamBeneficiaryUpdated(uint256 _teamID, address _oldBeneficiary, address _newBeneficiary, address _sender)
func (_Valist *ValistFilterer) FilterTeamBeneficiaryUpdated(opts *bind.FilterOpts) (*ValistTeamBeneficiaryUpdatedIterator, error) {

	logs, sub, err := _Valist.contract.FilterLogs(opts, "TeamBeneficiaryUpdated")
	if err != nil {
		return nil, err
	}
	return &ValistTeamBeneficiaryUpdatedIterator{contract: _Valist.contract, event: "TeamBeneficiaryUpdated", logs: logs, sub: sub}, nil
}

// WatchTeamBeneficiaryUpdated is a free log subscription operation binding the contract event 0xee3cd2395369f53e6494e3283648cbb3a49b6dc16a4a85ee5add02f11c160213.
//
// Solidity: event TeamBeneficiaryUpdated(uint256 _teamID, address _oldBeneficiary, address _newBeneficiary, address _sender)
func (_Valist *ValistFilterer) WatchTeamBeneficiaryUpdated(opts *bind.WatchOpts, sink chan<- *ValistTeamBeneficiaryUpdated) (event.Subscription, error) {

	logs, sub, err := _Valist.contract.WatchLogs(opts, "TeamBeneficiaryUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValistTeamBeneficiaryUpdated)
				if err := _Valist.contract.UnpackLog(event, "TeamBeneficiaryUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTeamBeneficiaryUpdated is a log parse operation binding the contract event 0xee3cd2395369f53e6494e3283648cbb3a49b6dc16a4a85ee5add02f11c160213.
//
// Solidity: event TeamBeneficiaryUpdated(uint256 _teamID, address _oldBeneficiary, address _newBeneficiary, address _sender)
func (_Valist *ValistFilterer) ParseTeamBeneficiaryUpdated(log types.Log) (*ValistTeamBeneficiaryUpdated, error) {
	event := new(ValistTeamBeneficiaryUpdated)
	if err := _Valist.contract.UnpackLog(event, "TeamBeneficiaryUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValistTeamCreatedIterator is returned from FilterTeamCreated and is used to iterate over the raw logs and unpacked data for TeamCreated events raised by the Valist contract.
type ValistTeamCreatedIterator struct {
	Event *ValistTeamCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValistTeamCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValistTeamCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValistTeamCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValistTeamCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValistTeamCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValistTeamCreated represents a TeamCreated event raised by the Valist contract.
type ValistTeamCreated struct {
	TeamName string
	MetaURI  string
	Sender   common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTeamCreated is a free log retrieval operation binding the contract event 0x234eb9d37ed58b55e52e99246bb2b0cebb55311292e5d3de44a6df95a9af2501.
//
// Solidity: event TeamCreated(string _teamName, string _metaURI, address _sender)
func (_Valist *ValistFilterer) FilterTeamCreated(opts *bind.FilterOpts) (*ValistTeamCreatedIterator, error) {

	logs, sub, err := _Valist.contract.FilterLogs(opts, "TeamCreated")
	if err != nil {
		return nil, err
	}
	return &ValistTeamCreatedIterator{contract: _Valist.contract, event: "TeamCreated", logs: logs, sub: sub}, nil
}

// WatchTeamCreated is a free log subscription operation binding the contract event 0x234eb9d37ed58b55e52e99246bb2b0cebb55311292e5d3de44a6df95a9af2501.
//
// Solidity: event TeamCreated(string _teamName, string _metaURI, address _sender)
func (_Valist *ValistFilterer) WatchTeamCreated(opts *bind.WatchOpts, sink chan<- *ValistTeamCreated) (event.Subscription, error) {

	logs, sub, err := _Valist.contract.WatchLogs(opts, "TeamCreated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValistTeamCreated)
				if err := _Valist.contract.UnpackLog(event, "TeamCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTeamCreated is a log parse operation binding the contract event 0x234eb9d37ed58b55e52e99246bb2b0cebb55311292e5d3de44a6df95a9af2501.
//
// Solidity: event TeamCreated(string _teamName, string _metaURI, address _sender)
func (_Valist *ValistFilterer) ParseTeamCreated(log types.Log) (*ValistTeamCreated, error) {
	event := new(ValistTeamCreated)
	if err := _Valist.contract.UnpackLog(event, "TeamCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValistTeamMemberAddedIterator is returned from FilterTeamMemberAdded and is used to iterate over the raw logs and unpacked data for TeamMemberAdded events raised by the Valist contract.
type ValistTeamMemberAddedIterator struct {
	Event *ValistTeamMemberAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValistTeamMemberAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValistTeamMemberAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValistTeamMemberAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValistTeamMemberAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValistTeamMemberAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValistTeamMemberAdded represents a TeamMemberAdded event raised by the Valist contract.
type ValistTeamMemberAdded struct {
	TeamName string
	Member   common.Address
	Sender   common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTeamMemberAdded is a free log retrieval operation binding the contract event 0x98e10b6306823e1fdc72d0589b2d7b9ebe62196c538882d20daa97c94ce6ba39.
//
// Solidity: event TeamMemberAdded(string _teamName, address _member, address _sender)
func (_Valist *ValistFilterer) FilterTeamMemberAdded(opts *bind.FilterOpts) (*ValistTeamMemberAddedIterator, error) {

	logs, sub, err := _Valist.contract.FilterLogs(opts, "TeamMemberAdded")
	if err != nil {
		return nil, err
	}
	return &ValistTeamMemberAddedIterator{contract: _Valist.contract, event: "TeamMemberAdded", logs: logs, sub: sub}, nil
}

// WatchTeamMemberAdded is a free log subscription operation binding the contract event 0x98e10b6306823e1fdc72d0589b2d7b9ebe62196c538882d20daa97c94ce6ba39.
//
// Solidity: event TeamMemberAdded(string _teamName, address _member, address _sender)
func (_Valist *ValistFilterer) WatchTeamMemberAdded(opts *bind.WatchOpts, sink chan<- *ValistTeamMemberAdded) (event.Subscription, error) {

	logs, sub, err := _Valist.contract.WatchLogs(opts, "TeamMemberAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValistTeamMemberAdded)
				if err := _Valist.contract.UnpackLog(event, "TeamMemberAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTeamMemberAdded is a log parse operation binding the contract event 0x98e10b6306823e1fdc72d0589b2d7b9ebe62196c538882d20daa97c94ce6ba39.
//
// Solidity: event TeamMemberAdded(string _teamName, address _member, address _sender)
func (_Valist *ValistFilterer) ParseTeamMemberAdded(log types.Log) (*ValistTeamMemberAdded, error) {
	event := new(ValistTeamMemberAdded)
	if err := _Valist.contract.UnpackLog(event, "TeamMemberAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValistTeamMemberRemovedIterator is returned from FilterTeamMemberRemoved and is used to iterate over the raw logs and unpacked data for TeamMemberRemoved events raised by the Valist contract.
type ValistTeamMemberRemovedIterator struct {
	Event *ValistTeamMemberRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValistTeamMemberRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValistTeamMemberRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValistTeamMemberRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValistTeamMemberRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValistTeamMemberRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValistTeamMemberRemoved represents a TeamMemberRemoved event raised by the Valist contract.
type ValistTeamMemberRemoved struct {
	TeamName string
	Member   common.Address
	Sender   common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTeamMemberRemoved is a free log retrieval operation binding the contract event 0xb4cbe992be60a57bec13c1e476783a0869bfeb99857c45d05cfc4dd417f7940a.
//
// Solidity: event TeamMemberRemoved(string _teamName, address _member, address _sender)
func (_Valist *ValistFilterer) FilterTeamMemberRemoved(opts *bind.FilterOpts) (*ValistTeamMemberRemovedIterator, error) {

	logs, sub, err := _Valist.contract.FilterLogs(opts, "TeamMemberRemoved")
	if err != nil {
		return nil, err
	}
	return &ValistTeamMemberRemovedIterator{contract: _Valist.contract, event: "TeamMemberRemoved", logs: logs, sub: sub}, nil
}

// WatchTeamMemberRemoved is a free log subscription operation binding the contract event 0xb4cbe992be60a57bec13c1e476783a0869bfeb99857c45d05cfc4dd417f7940a.
//
// Solidity: event TeamMemberRemoved(string _teamName, address _member, address _sender)
func (_Valist *ValistFilterer) WatchTeamMemberRemoved(opts *bind.WatchOpts, sink chan<- *ValistTeamMemberRemoved) (event.Subscription, error) {

	logs, sub, err := _Valist.contract.WatchLogs(opts, "TeamMemberRemoved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValistTeamMemberRemoved)
				if err := _Valist.contract.UnpackLog(event, "TeamMemberRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTeamMemberRemoved is a log parse operation binding the contract event 0xb4cbe992be60a57bec13c1e476783a0869bfeb99857c45d05cfc4dd417f7940a.
//
// Solidity: event TeamMemberRemoved(string _teamName, address _member, address _sender)
func (_Valist *ValistFilterer) ParseTeamMemberRemoved(log types.Log) (*ValistTeamMemberRemoved, error) {
	event := new(ValistTeamMemberRemoved)
	if err := _Valist.contract.UnpackLog(event, "TeamMemberRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ValistTeamUpdatedIterator is returned from FilterTeamUpdated and is used to iterate over the raw logs and unpacked data for TeamUpdated events raised by the Valist contract.
type ValistTeamUpdatedIterator struct {
	Event *ValistTeamUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ValistTeamUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ValistTeamUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ValistTeamUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ValistTeamUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ValistTeamUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ValistTeamUpdated represents a TeamUpdated event raised by the Valist contract.
type ValistTeamUpdated struct {
	TeamName string
	MetaURI  string
	Sender   common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTeamUpdated is a free log retrieval operation binding the contract event 0x337efabade1b5802f3a562a44eb0b3222d30ad7717e865d76f4db7ecbea56e80.
//
// Solidity: event TeamUpdated(string _teamName, string _metaURI, address _sender)
func (_Valist *ValistFilterer) FilterTeamUpdated(opts *bind.FilterOpts) (*ValistTeamUpdatedIterator, error) {

	logs, sub, err := _Valist.contract.FilterLogs(opts, "TeamUpdated")
	if err != nil {
		return nil, err
	}
	return &ValistTeamUpdatedIterator{contract: _Valist.contract, event: "TeamUpdated", logs: logs, sub: sub}, nil
}

// WatchTeamUpdated is a free log subscription operation binding the contract event 0x337efabade1b5802f3a562a44eb0b3222d30ad7717e865d76f4db7ecbea56e80.
//
// Solidity: event TeamUpdated(string _teamName, string _metaURI, address _sender)
func (_Valist *ValistFilterer) WatchTeamUpdated(opts *bind.WatchOpts, sink chan<- *ValistTeamUpdated) (event.Subscription, error) {

	logs, sub, err := _Valist.contract.WatchLogs(opts, "TeamUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ValistTeamUpdated)
				if err := _Valist.contract.UnpackLog(event, "TeamUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTeamUpdated is a log parse operation binding the contract event 0x337efabade1b5802f3a562a44eb0b3222d30ad7717e865d76f4db7ecbea56e80.
//
// Solidity: event TeamUpdated(string _teamName, string _metaURI, address _sender)
func (_Valist *ValistFilterer) ParseTeamUpdated(log types.Log) (*ValistTeamUpdated, error) {
	event := new(ValistTeamUpdated)
	if err := _Valist.contract.UnpackLog(event, "TeamUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
