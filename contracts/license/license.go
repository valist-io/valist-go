// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package license

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// LicenseMetaData contains all meta data concerning the License contract.
var LicenseMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_projectID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"BalanceWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_projectID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"LimitChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_projectID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"PriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_projectID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"ProductPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_projectID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"RoyaltyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectID\",\"type\":\"uint256\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_projectID\",\"type\":\"uint256\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectID\",\"type\":\"uint256\"}],\"name\":\"getLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_projectID\",\"type\":\"uint256\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectID\",\"type\":\"uint256\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectID\",\"type\":\"uint256\"}],\"name\":\"getSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"addresspayable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"purchase\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_projectID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"purchase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contractRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"setLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"addresspayable\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_projectID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_protocolFee\",\"type\":\"uint256\"}],\"name\":\"setProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"}],\"name\":\"setRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setRoyalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectID\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_projectID\",\"type\":\"uint256\"},{\"internalType\":\"addresspayable\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_projectID\",\"type\":\"uint256\"},{\"internalType\":\"addresspayable\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60c060405260076080819052664c4943454e534560c81b60a09081526200002a91600591906200010a565b506040805180820190915260168082527f56616c6973742050726f64756374204c6963656e736500000000000000000000602090920191825262000071916006916200010a565b503480156200007f57600080fd5b506040516200340b3803806200340b833981016040819052620000a291620001b0565b604080516020810190915260008152620000bc81620000f1565b5060078054336001600160a01b031991821617909155600980549091166001600160a01b03929092169190911790556200021d565b8051620001069060029060208401906200010a565b5050565b8280546200011890620001e0565b90600052602060002090601f0160209004810192826200013c576000855562000187565b82601f106200015757805160ff191683800117855562000187565b8280016001018555821562000187579182015b82811115620001875782518255916020019190600101906200016a565b506200019592915062000199565b5090565b5b808211156200019557600081556001016200019a565b600060208284031215620001c2578081fd5b81516001600160a01b0381168114620001d9578182fd5b9392505050565b600181811c90821680620001f557607f821691505b602082108114156200021757634e487b7160e01b600052602260045260246000fd5b50919050565b6131de806200022d6000396000f3fe6080604052600436106101d65760003560e01c8063787dce3d11610102578063ae77c23711610095578063e985e9c511610064578063e985e9c514610601578063f242432a1461064a578063f77ee79d1461066a578063f7d975771461069a57600080fd5b8063ae77c23714610588578063b0e21e8a1461059b578063e3784066146105b1578063e7572230146105d157600080fd5b80638da5cb5b116100d15780638da5cb5b1461051357806395d89b4114610533578063a22cb46514610548578063a91ee0dc1461056857600080fd5b8063787dce3d1461046e5780637b1039991461048e5780637db3c828146104c6578063827d6320146104e657600080fd5b8063207add911161017a5780633011e16a116101495780633011e16a146103bb578063449e815d146103db5780634e1273f41461042157806369328dec1461044e57600080fd5b8063207add91146102f35780632a55205a146103135780632b04e840146103525780632eb2c2d61461039b57600080fd5b806306fdde03116101b657806306fdde03146102605780630e89341c1461028257806313af4035146102a25780631e010439146102c257600080fd5b8062f714ce146101db578062fdd58e146101fd57806301ffc9a714610230575b600080fd5b3480156101e757600080fd5b506101fb6101f6366004612bc4565b6106ba565b005b34801561020957600080fd5b5061021d610218366004612955565b61089f565b6040519081526020015b60405180910390f35b34801561023c57600080fd5b5061025061024b366004612a69565b610931565b6040519015158152602001610227565b34801561026c57600080fd5b5061027561095c565b6040516102279190612d9b565b34801561028e57600080fd5b5061027561029d366004612b94565b6109ea565b3480156102ae57600080fd5b506101fb6102bd3660046127c3565b610a6b565b3480156102ce57600080fd5b5061021d6102dd366004612b94565b6000908152600360208190526040909120015490565b3480156102ff57600080fd5b506101fb61030e366004612c1f565b610ab7565b34801561031f57600080fd5b5061033361032e366004612c1f565b610c77565b604080516001600160a01b039093168352602083019190915201610227565b34801561035e57600080fd5b5061021d61036d366004612955565b60009081526003602090815260408083206001600160a01b0394909416835260049093019052206001015490565b3480156103a757600080fd5b506101fb6103b6366004612817565b610cd1565b3480156103c757600080fd5b506101fb6103d6366004612ae2565b610d68565b3480156103e757600080fd5b5061021d6103f6366004612955565b60009081526003602090815260408083206001600160a01b0394909416835260049093019052205490565b34801561042d57600080fd5b5061044161043c366004612980565b610f0d565b6040516102279190612d5a565b34801561045a57600080fd5b506101fb610469366004612aa1565b61106f565b34801561047a57600080fd5b506101fb610489366004612b94565b61127f565b34801561049a57600080fd5b506009546104ae906001600160a01b031681565b6040516001600160a01b039091168152602001610227565b3480156104d257600080fd5b506101fb6104e1366004612be8565b6112e9565b3480156104f257600080fd5b5061021d610501366004612b94565b60009081526003602052604090205490565b34801561051f57600080fd5b506007546104ae906001600160a01b031681565b34801561053f57600080fd5b506102756114a7565b34801561055457600080fd5b506101fb610563366004612928565b6114b4565b34801561057457600080fd5b506101fb6105833660046127c3565b6114c3565b6101fb610596366004612bc4565b61150f565b3480156105a757600080fd5b5061021d60085481565b3480156105bd57600080fd5b506101fb6105cc366004612aa1565b611697565b3480156105dd57600080fd5b5061021d6105ec366004612b94565b60009081526003602052604090206002015490565b34801561060d57600080fd5b5061025061061c3660046127df565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b34801561065657600080fd5b506101fb6106653660046128c1565b6118f1565b34801561067657600080fd5b5061021d610685366004612b94565b60009081526003602052604090206001015490565b3480156106a657600080fd5b506101fb6106b5366004612c1f565b611978565b60095460405163105b2ac360e21b8152600481018490526000916001600160a01b03169063416cab0c9060240160206040518083038186803b1580156106ff57600080fd5b505afa158015610713573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107379190612bac565b6009549091506001600160a01b0316636ad0a5ee82336040516001600160e01b031960e085901b16815260048101929092526001600160a01b0316602482015260440160206040518083038186803b15801561079257600080fd5b505afa1580156107a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ca9190612a4d565b6107ef5760405162461bcd60e51b81526004016107e690612edf565b60405180910390fd5b600083815260036020819052604090912001548061083d5760405162461bcd60e51b815260206004820152600b60248201526a6572722d62616c616e636560a81b60448201526064016107e6565b6000848152600360208190526040822001556108598382611b05565b7f04751620a1532cb5f45ff525275245b0dc69fc2e5acdf0c8154636daabfcce2f846000838633604051610891959493929190612f07565b60405180910390a150505050565b60006001600160a01b03831661090b5760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084016107e6565b506000908152602081815260408083206001600160a01b03949094168352929052205490565b60006001600160e01b0319821663152a902d60e11b1480610956575061095682611c23565b92915050565b600680546109699061301b565b80601f01602080910402602001604051908101604052809291908181526020018280546109959061301b565b80156109e25780601f106109b7576101008083540402835291602001916109e2565b820191906000526020600020905b8154815290600101906020018083116109c557829003601f168201915b505050505081565b6009546040516321a0be0360e11b8152600481018390526060916001600160a01b0316906343417c069060240160006040518083038186803b158015610a2f57600080fd5b505afa158015610a43573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109569190810190612b16565b6007546001600160a01b03163314610a955760405162461bcd60e51b81526004016107e690612ea8565b600780546001600160a01b0319166001600160a01b0392909216919091179055565b60095460405163105b2ac360e21b8152600481018490526000916001600160a01b03169063416cab0c9060240160206040518083038186803b158015610afc57600080fd5b505afa158015610b10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b349190612bac565b6009549091506001600160a01b0316636ad0a5ee82336040516001600160e01b031960e085901b16815260048101929092526001600160a01b0316602482015260440160206040518083038186803b158015610b8f57600080fd5b505afa158015610ba3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc79190612a4d565b610be35760405162461bcd60e51b81526004016107e690612edf565b600083815260036020526040902060010154821580610c025750808310155b610c1e5760405162461bcd60e51b81526004016107e690612df6565b60008481526003602052604090208390557fe03d1af674568db43fd12359b0c2caba687beab17076dad808305cbda27941e08484336040805193845260208401929092526001600160a01b031690820152606001610891565b6000828152600460209081526040808320815180830190925280546001600160a01b03168252600101549181018290528291829061271090610cb99087612fb9565b610cc39190612f99565b915196919550909350505050565b6001600160a01b038516331480610ced5750610ced853361061c565b610d545760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b60648201526084016107e6565b610d618585858585611c73565b5050505050565b60095460405163105b2ac360e21b8152600481018490526000916001600160a01b03169063416cab0c9060240160206040518083038186803b158015610dad57600080fd5b505afa158015610dc1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de59190612bac565b6009549091506001600160a01b0316636ad0a5ee82336040516001600160e01b031960e085901b16815260048101929092526001600160a01b0316602482015260440160206040518083038186803b158015610e4057600080fd5b505afa158015610e54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e789190612a4d565b610e945760405162461bcd60e51b81526004016107e690612edf565b60008381526003602090815260408083206001600160a01b038816845260040190915290208290557f177084a34b04a8e9e384feae8c2fa4ac26b3f4b24a18880900f596fac0847558838584335b604080519485526001600160a01b039384166020860152840191909152166060820152608001610891565b60608151835114610f725760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b60648201526084016107e6565b6000835167ffffffffffffffff811115610f9c57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610fc5578160200160208202803683370190505b50905060005b84518110156110675761102c858281518110610ff757634e487b7160e01b600052603260045260246000fd5b602002602001015185838151811061101f57634e487b7160e01b600052603260045260246000fd5b602002602001015161089f565b82828151811061104c57634e487b7160e01b600052603260045260246000fd5b602090810291909101015261106081613083565b9050610fcb565b509392505050565b60095460405163105b2ac360e21b8152600481018490526000916001600160a01b03169063416cab0c9060240160206040518083038186803b1580156110b457600080fd5b505afa1580156110c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ec9190612bac565b6009549091506001600160a01b0316636ad0a5ee82336040516001600160e01b031960e085901b16815260048101929092526001600160a01b0316602482015260440160206040518083038186803b15801561114757600080fd5b505afa15801561115b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061117f9190612a4d565b61119b5760405162461bcd60e51b81526004016107e690612edf565b60008381526003602090815260408083206001600160a01b0388168452600401909152902060010154806111ff5760405162461bcd60e51b815260206004820152600b60248201526a6572722d62616c616e636560a81b60448201526064016107e6565b60008481526003602090815260408083206001600160a01b0389168085526004909101909252822060010191909155611239908483611e6c565b7f04751620a1532cb5f45ff525275245b0dc69fc2e5acdf0c8154636daabfcce2f8486838633604051611270959493929190612f07565b60405180910390a15050505050565b6007546001600160a01b031633146112a95760405162461bcd60e51b81526004016107e690612ea8565b61271081106112e45760405162461bcd60e51b81526020600482015260076024820152666572722d62707360c81b60448201526064016107e6565b600855565b61271081106113245760405162461bcd60e51b81526020600482015260076024820152666572722d62707360c81b60448201526064016107e6565b60095460405163105b2ac360e21b8152600481018590526000916001600160a01b03169063416cab0c9060240160206040518083038186803b15801561136957600080fd5b505afa15801561137d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a19190612bac565b6009549091506001600160a01b0316636ad0a5ee82336040516001600160e01b031960e085901b16815260048101929092526001600160a01b0316602482015260440160206040518083038186803b1580156113fc57600080fd5b505afa158015611410573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114349190612a4d565b6114505760405162461bcd60e51b81526004016107e690612edf565b600084815260046020526040902080546001600160a01b0319166001600160a01b0385161781556001018290557fe7519564d05625627d3dbe586a6948df3f9c38bbd34841c59ff3a2f1be5b5e0684848433610ee2565b600580546109699061301b565b6114bf338383611ecf565b5050565b6007546001600160a01b031633146114ed5760405162461bcd60e51b81526004016107e690612ea8565b600980546001600160a01b0319166001600160a01b0392909216919091179055565b600082815260036020526040902060020154801580159061152f57508034145b6115675760405162461bcd60e51b81526020600482015260096024820152686572722d707269636560b81b60448201526064016107e6565b6000838152600360205260409020805460019091015481158061158957508181105b6115a55760405162461bcd60e51b81526004016107e690612df6565b6000612710600854856115b89190612fb9565b6115c29190612f99565b90506115ce8185612fd8565b600087815260036020819052604082200180549091906115ef908490612f81565b909155505060008681526003602052604081206001908101805491929091611618908490612f81565b9091555050600754611633906001600160a01b031682611b05565b61164f8587600160405180602001604052806000815250611fb0565b7f29db119c05c194379be903dc7e60b630ed6aea31a542f49193b142f61b2629f1866000868833604051611687959493929190612f07565b60405180910390a1505050505050565b60008281526003602090815260408083206001600160a01b0387168085526004909101909252822054919063dd62ed3e336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015230602482015260440160206040518083038186803b15801561170d57600080fd5b505afa158015611721573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117459190612bac565b90506000821180156117575750818110155b61178f5760405162461bcd60e51b81526020600482015260096024820152686572722d707269636560b81b60448201526064016107e6565b600084815260036020526040902080546001909101548115806117b157508181105b6117cd5760405162461bcd60e51b81526004016107e690612df6565b6000612710600854866117e09190612fb9565b6117ea9190612f99565b90506117f68186612fd8565b60008881526003602090815260408083206001600160a01b038d1684526004019091528120600101805490919061182e908490612f81565b909155505060008781526003602052604081206001908101805491929091611857908490612f81565b9091555061187290506001600160a01b0389163330886120ba565b60075461188c906001600160a01b038a8116911683611e6c565b6118a88688600160405180602001604052806000815250611fb0565b7f29db119c05c194379be903dc7e60b630ed6aea31a542f49193b142f61b2629f187898789336040516118df959493929190612f07565b60405180910390a15050505050505050565b6001600160a01b03851633148061190d575061190d853361061c565b61196b5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b60648201526084016107e6565b610d6185858585856120f8565b60095460405163105b2ac360e21b8152600481018490526000916001600160a01b03169063416cab0c9060240160206040518083038186803b1580156119bd57600080fd5b505afa1580156119d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119f59190612bac565b6009549091506001600160a01b0316636ad0a5ee82336040516001600160e01b031960e085901b16815260048101929092526001600160a01b0316602482015260440160206040518083038186803b158015611a5057600080fd5b505afa158015611a64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a889190612a4d565b611aa45760405162461bcd60e51b81526004016107e690612edf565b60008381526003602090815260408083206002018590558051868152918201929092529081018390523360608201527f177084a34b04a8e9e384feae8c2fa4ac26b3f4b24a18880900f596fac08475589060800160405180910390a1505050565b80471015611b555760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016107e6565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114611ba2576040519150601f19603f3d011682016040523d82523d6000602084013e611ba7565b606091505b5050905080611c1e5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016107e6565b505050565b60006001600160e01b03198216636cdb3d1360e11b1480611c5457506001600160e01b031982166303a24d0760e21b145b8061095657506301ffc9a760e01b6001600160e01b0319831614610956565b8151835114611cd55760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b60648201526084016107e6565b6001600160a01b038416611cfb5760405162461bcd60e51b81526004016107e690612e19565b3360005b8451811015611dfe576000858281518110611d2a57634e487b7160e01b600052603260045260246000fd5b602002602001015190506000858381518110611d5657634e487b7160e01b600052603260045260246000fd5b602090810291909101810151600084815280835260408082206001600160a01b038e168352909352919091205490915081811015611da65760405162461bcd60e51b81526004016107e690612e5e565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290611de3908490612f81565b9250508190555050505080611df790613083565b9050611cff565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051611e4e929190612d6d565b60405180910390a4611e64818787878787612215565b505050505050565b6040516001600160a01b038316602482015260448101829052611c1e90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152612380565b816001600160a01b0316836001600160a01b03161415611f435760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b60648201526084016107e6565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0384166120105760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b60648201526084016107e6565b3361202a8160008761202188612452565b610d6188612452565b6000848152602081815260408083206001600160a01b03891684529091528120805485929061205a908490612f81565b909155505060408051858152602081018590526001600160a01b0380881692600092918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4610d61816000878787876124ab565b6040516001600160a01b03808516602483015283166044820152606481018290526120f29085906323b872dd60e01b90608401611e98565b50505050565b6001600160a01b03841661211e5760405162461bcd60e51b81526004016107e690612e19565b3361212e81878761202188612452565b6000848152602081815260408083206001600160a01b038a1684529091529020548381101561216f5760405162461bcd60e51b81526004016107e690612e5e565b6000858152602081815260408083206001600160a01b038b81168552925280832087850390559088168252812080548692906121ac908490612f81565b909155505060408051868152602081018690526001600160a01b03808916928a821692918616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461220c8288888888886124ab565b50505050505050565b6001600160a01b0384163b15611e645760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906122599089908990889088908890600401612cc2565b602060405180830381600087803b15801561227357600080fd5b505af19250505080156122a3575060408051601f3d908101601f191682019092526122a091810190612a85565b60015b612350576122af6130ca565b806308c379a014156122e957506122c46130e2565b806122cf57506122eb565b8060405162461bcd60e51b81526004016107e69190612d9b565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b60648201526084016107e6565b6001600160e01b0319811663bc197c8160e01b1461220c5760405162461bcd60e51b81526004016107e690612dae565b60006123d5826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166125759092919063ffffffff16565b805190915015611c1e57808060200190518101906123f39190612a4d565b611c1e5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016107e6565b6040805160018082528183019092526060916000919060208083019080368337019050509050828160008151811061249a57634e487b7160e01b600052603260045260246000fd5b602090810291909101015292915050565b6001600160a01b0384163b15611e645760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906124ef9089908990889088908890600401612d20565b602060405180830381600087803b15801561250957600080fd5b505af1925050508015612539575060408051601f3d908101601f1916820190925261253691810190612a85565b60015b612545576122af6130ca565b6001600160e01b0319811663f23a6e6160e01b1461220c5760405162461bcd60e51b81526004016107e690612dae565b6060612584848460008561258e565b90505b9392505050565b6060824710156125ef5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016107e6565b6001600160a01b0385163b6126465760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016107e6565b600080866001600160a01b031685876040516126629190612ca6565b60006040518083038185875af1925050503d806000811461269f576040519150601f19603f3d011682016040523d82523d6000602084013e6126a4565b606091505b50915091506126b48282866126bf565b979650505050505050565b606083156126ce575081612587565b8251156126de5782518084602001fd5b8160405162461bcd60e51b81526004016107e69190612d9b565b600082601f830112612708578081fd5b8135602061271582612f35565b6040516127228282613056565b8381528281019150858301600585901b87018401881015612741578586fd5b855b8581101561275f57813584529284019290840190600101612743565b5090979650505050505050565b600082601f83011261277c578081fd5b813561278781612f59565b6040516127948282613056565b8281528560208487010111156127a8578384fd5b82602086016020830137918201602001929092529392505050565b6000602082840312156127d4578081fd5b81356125878161316c565b600080604083850312156127f1578081fd5b82356127fc8161316c565b9150602083013561280c8161316c565b809150509250929050565b600080600080600060a0868803121561282e578081fd5b85356128398161316c565b945060208601356128498161316c565b9350604086013567ffffffffffffffff80821115612865578283fd5b61287189838a016126f8565b94506060880135915080821115612886578283fd5b61289289838a016126f8565b935060808801359150808211156128a7578283fd5b506128b48882890161276c565b9150509295509295909350565b600080600080600060a086880312156128d8578081fd5b85356128e38161316c565b945060208601356128f38161316c565b93506040860135925060608601359150608086013567ffffffffffffffff81111561291c578182fd5b6128b48882890161276c565b6000806040838503121561293a578182fd5b82356129458161316c565b9150602083013561280c81613184565b60008060408385031215612967578182fd5b82356129728161316c565b946020939093013593505050565b60008060408385031215612992578182fd5b823567ffffffffffffffff808211156129a9578384fd5b818501915085601f8301126129bc578384fd5b813560206129c982612f35565b6040516129d68282613056565b8381528281019150858301600585901b870184018b10156129f5578889fd5b8896505b84871015612a20578035612a0c8161316c565b8352600196909601959183019183016129f9565b5096505086013592505080821115612a36578283fd5b50612a43858286016126f8565b9150509250929050565b600060208284031215612a5e578081fd5b815161258781613184565b600060208284031215612a7a578081fd5b813561258781613192565b600060208284031215612a96578081fd5b815161258781613192565b600080600060608486031215612ab5578081fd5b8335612ac08161316c565b9250602084013591506040840135612ad78161316c565b809150509250925092565b600080600060608486031215612af6578081fd5b8335612b018161316c565b95602085013595506040909401359392505050565b600060208284031215612b27578081fd5b815167ffffffffffffffff811115612b3d578182fd5b8201601f81018413612b4d578182fd5b8051612b5881612f59565b604051612b658282613056565b828152866020848601011115612b79578485fd5b612b8a836020830160208701612fef565b9695505050505050565b600060208284031215612ba5578081fd5b5035919050565b600060208284031215612bbd578081fd5b5051919050565b60008060408385031215612bd6578182fd5b82359150602083013561280c8161316c565b600080600060608486031215612bfc578081fd5b833592506020840135612c0e8161316c565b929592945050506040919091013590565b60008060408385031215612c31578182fd5b50508035926020909101359150565b6000815180845260208085019450808401835b83811015612c6f57815187529582019590820190600101612c53565b509495945050505050565b60008151808452612c92816020860160208601612fef565b601f01601f19169290920160200192915050565b60008251612cb8818460208701612fef565b9190910192915050565b6001600160a01b0386811682528516602082015260a060408201819052600090612cee90830186612c40565b8281036060840152612d008186612c40565b90508281036080840152612d148185612c7a565b98975050505050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a0608082018190526000906126b490830184612c7a565b6020815260006125876020830184612c40565b604081526000612d806040830185612c40565b8281036020840152612d928185612c40565b95945050505050565b6020815260006125876020830184612c7a565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b602080825260099082015268195c9c8b5b1a5b5a5d60ba1b604082015260600190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b60208082526017908201527f63616c6c6572206973206e6f7420746865206f776e6572000000000000000000604082015260600190565b6020808252600e908201526d32b93916b737ba16b6b2b6b132b960911b604082015260600190565b9485526001600160a01b03938416602086015260408501929092528216606084015216608082015260a00190565b600067ffffffffffffffff821115612f4f57612f4f6130b4565b5060051b60200190565b600067ffffffffffffffff821115612f7357612f736130b4565b50601f01601f191660200190565b60008219821115612f9457612f9461309e565b500190565b600082612fb457634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615612fd357612fd361309e565b500290565b600082821015612fea57612fea61309e565b500390565b60005b8381101561300a578181015183820152602001612ff2565b838111156120f25750506000910152565b600181811c9082168061302f57607f821691505b6020821081141561305057634e487b7160e01b600052602260045260246000fd5b50919050565b601f8201601f1916810167ffffffffffffffff8111828210171561307c5761307c6130b4565b6040525050565b60006000198214156130975761309761309e565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d11156130df57600481823e5160e01c5b90565b600060443d10156130f05790565b6040516003193d81016004833e81513d67ffffffffffffffff816024840111818411171561312057505050505090565b82850191508151818111156131385750505050505090565b843d87010160208285010111156131525750505050505090565b61316160208286010187613056565b509095945050505050565b6001600160a01b038116811461318157600080fd5b50565b801515811461318157600080fd5b6001600160e01b03198116811461318157600080fdfea264697066735822122039a372d46331fd8e2677a41b989c6e0c2e5fd62b4a2cc3a622867429d06a654164736f6c63430008040033",
}

// LicenseABI is the input ABI used to generate the binding from.
// Deprecated: Use LicenseMetaData.ABI instead.
var LicenseABI = LicenseMetaData.ABI

// LicenseBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use LicenseMetaData.Bin instead.
var LicenseBin = LicenseMetaData.Bin

// DeployLicense deploys a new Ethereum contract, binding an instance of License to it.
func DeployLicense(auth *bind.TransactOpts, backend bind.ContractBackend, _registry common.Address) (common.Address, *types.Transaction, *License, error) {
	parsed, err := LicenseMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(LicenseBin), backend, _registry)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &License{LicenseCaller: LicenseCaller{contract: contract}, LicenseTransactor: LicenseTransactor{contract: contract}, LicenseFilterer: LicenseFilterer{contract: contract}}, nil
}

// License is an auto generated Go binding around an Ethereum contract.
type License struct {
	LicenseCaller     // Read-only binding to the contract
	LicenseTransactor // Write-only binding to the contract
	LicenseFilterer   // Log filterer for contract events
}

// LicenseCaller is an auto generated read-only Go binding around an Ethereum contract.
type LicenseCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LicenseTransactor is an auto generated write-only Go binding around an Ethereum contract.
type LicenseTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LicenseFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type LicenseFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// LicenseSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type LicenseSession struct {
	Contract     *License          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// LicenseCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type LicenseCallerSession struct {
	Contract *LicenseCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// LicenseTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type LicenseTransactorSession struct {
	Contract     *LicenseTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// LicenseRaw is an auto generated low-level Go binding around an Ethereum contract.
type LicenseRaw struct {
	Contract *License // Generic contract binding to access the raw methods on
}

// LicenseCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type LicenseCallerRaw struct {
	Contract *LicenseCaller // Generic read-only contract binding to access the raw methods on
}

// LicenseTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type LicenseTransactorRaw struct {
	Contract *LicenseTransactor // Generic write-only contract binding to access the raw methods on
}

// NewLicense creates a new instance of License, bound to a specific deployed contract.
func NewLicense(address common.Address, backend bind.ContractBackend) (*License, error) {
	contract, err := bindLicense(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &License{LicenseCaller: LicenseCaller{contract: contract}, LicenseTransactor: LicenseTransactor{contract: contract}, LicenseFilterer: LicenseFilterer{contract: contract}}, nil
}

// NewLicenseCaller creates a new read-only instance of License, bound to a specific deployed contract.
func NewLicenseCaller(address common.Address, caller bind.ContractCaller) (*LicenseCaller, error) {
	contract, err := bindLicense(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &LicenseCaller{contract: contract}, nil
}

// NewLicenseTransactor creates a new write-only instance of License, bound to a specific deployed contract.
func NewLicenseTransactor(address common.Address, transactor bind.ContractTransactor) (*LicenseTransactor, error) {
	contract, err := bindLicense(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &LicenseTransactor{contract: contract}, nil
}

// NewLicenseFilterer creates a new log filterer instance of License, bound to a specific deployed contract.
func NewLicenseFilterer(address common.Address, filterer bind.ContractFilterer) (*LicenseFilterer, error) {
	contract, err := bindLicense(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &LicenseFilterer{contract: contract}, nil
}

// bindLicense binds a generic wrapper to an already deployed contract.
func bindLicense(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(LicenseABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_License *LicenseRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _License.Contract.LicenseCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_License *LicenseRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _License.Contract.LicenseTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_License *LicenseRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _License.Contract.LicenseTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_License *LicenseCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _License.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_License *LicenseTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _License.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_License *LicenseTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _License.Contract.contract.Transact(opts, method, params...)
}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address account, uint256 id) view returns(uint256)
func (_License *LicenseCaller) BalanceOf(opts *bind.CallOpts, account common.Address, id *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _License.contract.Call(opts, &out, "balanceOf", account, id)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address account, uint256 id) view returns(uint256)
func (_License *LicenseSession) BalanceOf(account common.Address, id *big.Int) (*big.Int, error) {
	return _License.Contract.BalanceOf(&_License.CallOpts, account, id)
}

// BalanceOf is a free data retrieval call binding the contract method 0x00fdd58e.
//
// Solidity: function balanceOf(address account, uint256 id) view returns(uint256)
func (_License *LicenseCallerSession) BalanceOf(account common.Address, id *big.Int) (*big.Int, error) {
	return _License.Contract.BalanceOf(&_License.CallOpts, account, id)
}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] accounts, uint256[] ids) view returns(uint256[])
func (_License *LicenseCaller) BalanceOfBatch(opts *bind.CallOpts, accounts []common.Address, ids []*big.Int) ([]*big.Int, error) {
	var out []interface{}
	err := _License.contract.Call(opts, &out, "balanceOfBatch", accounts, ids)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] accounts, uint256[] ids) view returns(uint256[])
func (_License *LicenseSession) BalanceOfBatch(accounts []common.Address, ids []*big.Int) ([]*big.Int, error) {
	return _License.Contract.BalanceOfBatch(&_License.CallOpts, accounts, ids)
}

// BalanceOfBatch is a free data retrieval call binding the contract method 0x4e1273f4.
//
// Solidity: function balanceOfBatch(address[] accounts, uint256[] ids) view returns(uint256[])
func (_License *LicenseCallerSession) BalanceOfBatch(accounts []common.Address, ids []*big.Int) ([]*big.Int, error) {
	return _License.Contract.BalanceOfBatch(&_License.CallOpts, accounts, ids)
}

// GetBalance is a free data retrieval call binding the contract method 0x1e010439.
//
// Solidity: function getBalance(uint256 _projectID) view returns(uint256)
func (_License *LicenseCaller) GetBalance(opts *bind.CallOpts, _projectID *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _License.contract.Call(opts, &out, "getBalance", _projectID)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetBalance is a free data retrieval call binding the contract method 0x1e010439.
//
// Solidity: function getBalance(uint256 _projectID) view returns(uint256)
func (_License *LicenseSession) GetBalance(_projectID *big.Int) (*big.Int, error) {
	return _License.Contract.GetBalance(&_License.CallOpts, _projectID)
}

// GetBalance is a free data retrieval call binding the contract method 0x1e010439.
//
// Solidity: function getBalance(uint256 _projectID) view returns(uint256)
func (_License *LicenseCallerSession) GetBalance(_projectID *big.Int) (*big.Int, error) {
	return _License.Contract.GetBalance(&_License.CallOpts, _projectID)
}

// GetBalance0 is a free data retrieval call binding the contract method 0x2b04e840.
//
// Solidity: function getBalance(address _token, uint256 _projectID) view returns(uint256)
func (_License *LicenseCaller) GetBalance0(opts *bind.CallOpts, _token common.Address, _projectID *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _License.contract.Call(opts, &out, "getBalance0", _token, _projectID)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetBalance0 is a free data retrieval call binding the contract method 0x2b04e840.
//
// Solidity: function getBalance(address _token, uint256 _projectID) view returns(uint256)
func (_License *LicenseSession) GetBalance0(_token common.Address, _projectID *big.Int) (*big.Int, error) {
	return _License.Contract.GetBalance0(&_License.CallOpts, _token, _projectID)
}

// GetBalance0 is a free data retrieval call binding the contract method 0x2b04e840.
//
// Solidity: function getBalance(address _token, uint256 _projectID) view returns(uint256)
func (_License *LicenseCallerSession) GetBalance0(_token common.Address, _projectID *big.Int) (*big.Int, error) {
	return _License.Contract.GetBalance0(&_License.CallOpts, _token, _projectID)
}

// GetLimit is a free data retrieval call binding the contract method 0x827d6320.
//
// Solidity: function getLimit(uint256 _projectID) view returns(uint256)
func (_License *LicenseCaller) GetLimit(opts *bind.CallOpts, _projectID *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _License.contract.Call(opts, &out, "getLimit", _projectID)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetLimit is a free data retrieval call binding the contract method 0x827d6320.
//
// Solidity: function getLimit(uint256 _projectID) view returns(uint256)
func (_License *LicenseSession) GetLimit(_projectID *big.Int) (*big.Int, error) {
	return _License.Contract.GetLimit(&_License.CallOpts, _projectID)
}

// GetLimit is a free data retrieval call binding the contract method 0x827d6320.
//
// Solidity: function getLimit(uint256 _projectID) view returns(uint256)
func (_License *LicenseCallerSession) GetLimit(_projectID *big.Int) (*big.Int, error) {
	return _License.Contract.GetLimit(&_License.CallOpts, _projectID)
}

// GetPrice is a free data retrieval call binding the contract method 0x449e815d.
//
// Solidity: function getPrice(address _token, uint256 _projectID) view returns(uint256)
func (_License *LicenseCaller) GetPrice(opts *bind.CallOpts, _token common.Address, _projectID *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _License.contract.Call(opts, &out, "getPrice", _token, _projectID)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPrice is a free data retrieval call binding the contract method 0x449e815d.
//
// Solidity: function getPrice(address _token, uint256 _projectID) view returns(uint256)
func (_License *LicenseSession) GetPrice(_token common.Address, _projectID *big.Int) (*big.Int, error) {
	return _License.Contract.GetPrice(&_License.CallOpts, _token, _projectID)
}

// GetPrice is a free data retrieval call binding the contract method 0x449e815d.
//
// Solidity: function getPrice(address _token, uint256 _projectID) view returns(uint256)
func (_License *LicenseCallerSession) GetPrice(_token common.Address, _projectID *big.Int) (*big.Int, error) {
	return _License.Contract.GetPrice(&_License.CallOpts, _token, _projectID)
}

// GetPrice0 is a free data retrieval call binding the contract method 0xe7572230.
//
// Solidity: function getPrice(uint256 _projectID) view returns(uint256)
func (_License *LicenseCaller) GetPrice0(opts *bind.CallOpts, _projectID *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _License.contract.Call(opts, &out, "getPrice0", _projectID)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPrice0 is a free data retrieval call binding the contract method 0xe7572230.
//
// Solidity: function getPrice(uint256 _projectID) view returns(uint256)
func (_License *LicenseSession) GetPrice0(_projectID *big.Int) (*big.Int, error) {
	return _License.Contract.GetPrice0(&_License.CallOpts, _projectID)
}

// GetPrice0 is a free data retrieval call binding the contract method 0xe7572230.
//
// Solidity: function getPrice(uint256 _projectID) view returns(uint256)
func (_License *LicenseCallerSession) GetPrice0(_projectID *big.Int) (*big.Int, error) {
	return _License.Contract.GetPrice0(&_License.CallOpts, _projectID)
}

// GetSupply is a free data retrieval call binding the contract method 0xf77ee79d.
//
// Solidity: function getSupply(uint256 _projectID) view returns(uint256)
func (_License *LicenseCaller) GetSupply(opts *bind.CallOpts, _projectID *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _License.contract.Call(opts, &out, "getSupply", _projectID)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetSupply is a free data retrieval call binding the contract method 0xf77ee79d.
//
// Solidity: function getSupply(uint256 _projectID) view returns(uint256)
func (_License *LicenseSession) GetSupply(_projectID *big.Int) (*big.Int, error) {
	return _License.Contract.GetSupply(&_License.CallOpts, _projectID)
}

// GetSupply is a free data retrieval call binding the contract method 0xf77ee79d.
//
// Solidity: function getSupply(uint256 _projectID) view returns(uint256)
func (_License *LicenseCallerSession) GetSupply(_projectID *big.Int) (*big.Int, error) {
	return _License.Contract.GetSupply(&_License.CallOpts, _projectID)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address account, address operator) view returns(bool)
func (_License *LicenseCaller) IsApprovedForAll(opts *bind.CallOpts, account common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _License.contract.Call(opts, &out, "isApprovedForAll", account, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address account, address operator) view returns(bool)
func (_License *LicenseSession) IsApprovedForAll(account common.Address, operator common.Address) (bool, error) {
	return _License.Contract.IsApprovedForAll(&_License.CallOpts, account, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address account, address operator) view returns(bool)
func (_License *LicenseCallerSession) IsApprovedForAll(account common.Address, operator common.Address) (bool, error) {
	return _License.Contract.IsApprovedForAll(&_License.CallOpts, account, operator)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_License *LicenseCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _License.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_License *LicenseSession) Name() (string, error) {
	return _License.Contract.Name(&_License.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_License *LicenseCallerSession) Name() (string, error) {
	return _License.Contract.Name(&_License.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_License *LicenseCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _License.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_License *LicenseSession) Owner() (common.Address, error) {
	return _License.Contract.Owner(&_License.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_License *LicenseCallerSession) Owner() (common.Address, error) {
	return _License.Contract.Owner(&_License.CallOpts)
}

// ProtocolFee is a free data retrieval call binding the contract method 0xb0e21e8a.
//
// Solidity: function protocolFee() view returns(uint256)
func (_License *LicenseCaller) ProtocolFee(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _License.contract.Call(opts, &out, "protocolFee")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ProtocolFee is a free data retrieval call binding the contract method 0xb0e21e8a.
//
// Solidity: function protocolFee() view returns(uint256)
func (_License *LicenseSession) ProtocolFee() (*big.Int, error) {
	return _License.Contract.ProtocolFee(&_License.CallOpts)
}

// ProtocolFee is a free data retrieval call binding the contract method 0xb0e21e8a.
//
// Solidity: function protocolFee() view returns(uint256)
func (_License *LicenseCallerSession) ProtocolFee() (*big.Int, error) {
	return _License.Contract.ProtocolFee(&_License.CallOpts)
}

// Registry is a free data retrieval call binding the contract method 0x7b103999.
//
// Solidity: function registry() view returns(address)
func (_License *LicenseCaller) Registry(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _License.contract.Call(opts, &out, "registry")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Registry is a free data retrieval call binding the contract method 0x7b103999.
//
// Solidity: function registry() view returns(address)
func (_License *LicenseSession) Registry() (common.Address, error) {
	return _License.Contract.Registry(&_License.CallOpts)
}

// Registry is a free data retrieval call binding the contract method 0x7b103999.
//
// Solidity: function registry() view returns(address)
func (_License *LicenseCallerSession) Registry() (common.Address, error) {
	return _License.Contract.Registry(&_License.CallOpts)
}

// RoyaltyInfo is a free data retrieval call binding the contract method 0x2a55205a.
//
// Solidity: function royaltyInfo(uint256 _projectID, uint256 _price) view returns(address, uint256)
func (_License *LicenseCaller) RoyaltyInfo(opts *bind.CallOpts, _projectID *big.Int, _price *big.Int) (common.Address, *big.Int, error) {
	var out []interface{}
	err := _License.contract.Call(opts, &out, "royaltyInfo", _projectID, _price)

	if err != nil {
		return *new(common.Address), *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return out0, out1, err

}

// RoyaltyInfo is a free data retrieval call binding the contract method 0x2a55205a.
//
// Solidity: function royaltyInfo(uint256 _projectID, uint256 _price) view returns(address, uint256)
func (_License *LicenseSession) RoyaltyInfo(_projectID *big.Int, _price *big.Int) (common.Address, *big.Int, error) {
	return _License.Contract.RoyaltyInfo(&_License.CallOpts, _projectID, _price)
}

// RoyaltyInfo is a free data retrieval call binding the contract method 0x2a55205a.
//
// Solidity: function royaltyInfo(uint256 _projectID, uint256 _price) view returns(address, uint256)
func (_License *LicenseCallerSession) RoyaltyInfo(_projectID *big.Int, _price *big.Int) (common.Address, *big.Int, error) {
	return _License.Contract.RoyaltyInfo(&_License.CallOpts, _projectID, _price)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_License *LicenseCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _License.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_License *LicenseSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _License.Contract.SupportsInterface(&_License.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_License *LicenseCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _License.Contract.SupportsInterface(&_License.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_License *LicenseCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _License.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_License *LicenseSession) Symbol() (string, error) {
	return _License.Contract.Symbol(&_License.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_License *LicenseCallerSession) Symbol() (string, error) {
	return _License.Contract.Symbol(&_License.CallOpts)
}

// Uri is a free data retrieval call binding the contract method 0x0e89341c.
//
// Solidity: function uri(uint256 _projectID) view returns(string)
func (_License *LicenseCaller) Uri(opts *bind.CallOpts, _projectID *big.Int) (string, error) {
	var out []interface{}
	err := _License.contract.Call(opts, &out, "uri", _projectID)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Uri is a free data retrieval call binding the contract method 0x0e89341c.
//
// Solidity: function uri(uint256 _projectID) view returns(string)
func (_License *LicenseSession) Uri(_projectID *big.Int) (string, error) {
	return _License.Contract.Uri(&_License.CallOpts, _projectID)
}

// Uri is a free data retrieval call binding the contract method 0x0e89341c.
//
// Solidity: function uri(uint256 _projectID) view returns(string)
func (_License *LicenseCallerSession) Uri(_projectID *big.Int) (string, error) {
	return _License.Contract.Uri(&_License.CallOpts, _projectID)
}

// Purchase is a paid mutator transaction binding the contract method 0xae77c237.
//
// Solidity: function purchase(uint256 _projectID, address _recipient) payable returns()
func (_License *LicenseTransactor) Purchase(opts *bind.TransactOpts, _projectID *big.Int, _recipient common.Address) (*types.Transaction, error) {
	return _License.contract.Transact(opts, "purchase", _projectID, _recipient)
}

// Purchase is a paid mutator transaction binding the contract method 0xae77c237.
//
// Solidity: function purchase(uint256 _projectID, address _recipient) payable returns()
func (_License *LicenseSession) Purchase(_projectID *big.Int, _recipient common.Address) (*types.Transaction, error) {
	return _License.Contract.Purchase(&_License.TransactOpts, _projectID, _recipient)
}

// Purchase is a paid mutator transaction binding the contract method 0xae77c237.
//
// Solidity: function purchase(uint256 _projectID, address _recipient) payable returns()
func (_License *LicenseTransactorSession) Purchase(_projectID *big.Int, _recipient common.Address) (*types.Transaction, error) {
	return _License.Contract.Purchase(&_License.TransactOpts, _projectID, _recipient)
}

// Purchase0 is a paid mutator transaction binding the contract method 0xe3784066.
//
// Solidity: function purchase(address _token, uint256 _projectID, address _recipient) returns()
func (_License *LicenseTransactor) Purchase0(opts *bind.TransactOpts, _token common.Address, _projectID *big.Int, _recipient common.Address) (*types.Transaction, error) {
	return _License.contract.Transact(opts, "purchase0", _token, _projectID, _recipient)
}

// Purchase0 is a paid mutator transaction binding the contract method 0xe3784066.
//
// Solidity: function purchase(address _token, uint256 _projectID, address _recipient) returns()
func (_License *LicenseSession) Purchase0(_token common.Address, _projectID *big.Int, _recipient common.Address) (*types.Transaction, error) {
	return _License.Contract.Purchase0(&_License.TransactOpts, _token, _projectID, _recipient)
}

// Purchase0 is a paid mutator transaction binding the contract method 0xe3784066.
//
// Solidity: function purchase(address _token, uint256 _projectID, address _recipient) returns()
func (_License *LicenseTransactorSession) Purchase0(_token common.Address, _projectID *big.Int, _recipient common.Address) (*types.Transaction, error) {
	return _License.Contract.Purchase0(&_License.TransactOpts, _token, _projectID, _recipient)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address from, address to, uint256[] ids, uint256[] amounts, bytes data) returns()
func (_License *LicenseTransactor) SafeBatchTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, ids []*big.Int, amounts []*big.Int, data []byte) (*types.Transaction, error) {
	return _License.contract.Transact(opts, "safeBatchTransferFrom", from, to, ids, amounts, data)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address from, address to, uint256[] ids, uint256[] amounts, bytes data) returns()
func (_License *LicenseSession) SafeBatchTransferFrom(from common.Address, to common.Address, ids []*big.Int, amounts []*big.Int, data []byte) (*types.Transaction, error) {
	return _License.Contract.SafeBatchTransferFrom(&_License.TransactOpts, from, to, ids, amounts, data)
}

// SafeBatchTransferFrom is a paid mutator transaction binding the contract method 0x2eb2c2d6.
//
// Solidity: function safeBatchTransferFrom(address from, address to, uint256[] ids, uint256[] amounts, bytes data) returns()
func (_License *LicenseTransactorSession) SafeBatchTransferFrom(from common.Address, to common.Address, ids []*big.Int, amounts []*big.Int, data []byte) (*types.Transaction, error) {
	return _License.Contract.SafeBatchTransferFrom(&_License.TransactOpts, from, to, ids, amounts, data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes data) returns()
func (_License *LicenseTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, id *big.Int, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _License.contract.Transact(opts, "safeTransferFrom", from, to, id, amount, data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes data) returns()
func (_License *LicenseSession) SafeTransferFrom(from common.Address, to common.Address, id *big.Int, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _License.Contract.SafeTransferFrom(&_License.TransactOpts, from, to, id, amount, data)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0xf242432a.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes data) returns()
func (_License *LicenseTransactorSession) SafeTransferFrom(from common.Address, to common.Address, id *big.Int, amount *big.Int, data []byte) (*types.Transaction, error) {
	return _License.Contract.SafeTransferFrom(&_License.TransactOpts, from, to, id, amount, data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_License *LicenseTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _License.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_License *LicenseSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _License.Contract.SetApprovalForAll(&_License.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_License *LicenseTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _License.Contract.SetApprovalForAll(&_License.TransactOpts, operator, approved)
}

// SetLimit is a paid mutator transaction binding the contract method 0x207add91.
//
// Solidity: function setLimit(uint256 _projectID, uint256 _limit) returns()
func (_License *LicenseTransactor) SetLimit(opts *bind.TransactOpts, _projectID *big.Int, _limit *big.Int) (*types.Transaction, error) {
	return _License.contract.Transact(opts, "setLimit", _projectID, _limit)
}

// SetLimit is a paid mutator transaction binding the contract method 0x207add91.
//
// Solidity: function setLimit(uint256 _projectID, uint256 _limit) returns()
func (_License *LicenseSession) SetLimit(_projectID *big.Int, _limit *big.Int) (*types.Transaction, error) {
	return _License.Contract.SetLimit(&_License.TransactOpts, _projectID, _limit)
}

// SetLimit is a paid mutator transaction binding the contract method 0x207add91.
//
// Solidity: function setLimit(uint256 _projectID, uint256 _limit) returns()
func (_License *LicenseTransactorSession) SetLimit(_projectID *big.Int, _limit *big.Int) (*types.Transaction, error) {
	return _License.Contract.SetLimit(&_License.TransactOpts, _projectID, _limit)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address _owner) returns()
func (_License *LicenseTransactor) SetOwner(opts *bind.TransactOpts, _owner common.Address) (*types.Transaction, error) {
	return _License.contract.Transact(opts, "setOwner", _owner)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address _owner) returns()
func (_License *LicenseSession) SetOwner(_owner common.Address) (*types.Transaction, error) {
	return _License.Contract.SetOwner(&_License.TransactOpts, _owner)
}

// SetOwner is a paid mutator transaction binding the contract method 0x13af4035.
//
// Solidity: function setOwner(address _owner) returns()
func (_License *LicenseTransactorSession) SetOwner(_owner common.Address) (*types.Transaction, error) {
	return _License.Contract.SetOwner(&_License.TransactOpts, _owner)
}

// SetPrice is a paid mutator transaction binding the contract method 0x3011e16a.
//
// Solidity: function setPrice(address _token, uint256 _projectID, uint256 _price) returns()
func (_License *LicenseTransactor) SetPrice(opts *bind.TransactOpts, _token common.Address, _projectID *big.Int, _price *big.Int) (*types.Transaction, error) {
	return _License.contract.Transact(opts, "setPrice", _token, _projectID, _price)
}

// SetPrice is a paid mutator transaction binding the contract method 0x3011e16a.
//
// Solidity: function setPrice(address _token, uint256 _projectID, uint256 _price) returns()
func (_License *LicenseSession) SetPrice(_token common.Address, _projectID *big.Int, _price *big.Int) (*types.Transaction, error) {
	return _License.Contract.SetPrice(&_License.TransactOpts, _token, _projectID, _price)
}

// SetPrice is a paid mutator transaction binding the contract method 0x3011e16a.
//
// Solidity: function setPrice(address _token, uint256 _projectID, uint256 _price) returns()
func (_License *LicenseTransactorSession) SetPrice(_token common.Address, _projectID *big.Int, _price *big.Int) (*types.Transaction, error) {
	return _License.Contract.SetPrice(&_License.TransactOpts, _token, _projectID, _price)
}

// SetPrice0 is a paid mutator transaction binding the contract method 0xf7d97577.
//
// Solidity: function setPrice(uint256 _projectID, uint256 _price) returns()
func (_License *LicenseTransactor) SetPrice0(opts *bind.TransactOpts, _projectID *big.Int, _price *big.Int) (*types.Transaction, error) {
	return _License.contract.Transact(opts, "setPrice0", _projectID, _price)
}

// SetPrice0 is a paid mutator transaction binding the contract method 0xf7d97577.
//
// Solidity: function setPrice(uint256 _projectID, uint256 _price) returns()
func (_License *LicenseSession) SetPrice0(_projectID *big.Int, _price *big.Int) (*types.Transaction, error) {
	return _License.Contract.SetPrice0(&_License.TransactOpts, _projectID, _price)
}

// SetPrice0 is a paid mutator transaction binding the contract method 0xf7d97577.
//
// Solidity: function setPrice(uint256 _projectID, uint256 _price) returns()
func (_License *LicenseTransactorSession) SetPrice0(_projectID *big.Int, _price *big.Int) (*types.Transaction, error) {
	return _License.Contract.SetPrice0(&_License.TransactOpts, _projectID, _price)
}

// SetProtocolFee is a paid mutator transaction binding the contract method 0x787dce3d.
//
// Solidity: function setProtocolFee(uint256 _protocolFee) returns()
func (_License *LicenseTransactor) SetProtocolFee(opts *bind.TransactOpts, _protocolFee *big.Int) (*types.Transaction, error) {
	return _License.contract.Transact(opts, "setProtocolFee", _protocolFee)
}

// SetProtocolFee is a paid mutator transaction binding the contract method 0x787dce3d.
//
// Solidity: function setProtocolFee(uint256 _protocolFee) returns()
func (_License *LicenseSession) SetProtocolFee(_protocolFee *big.Int) (*types.Transaction, error) {
	return _License.Contract.SetProtocolFee(&_License.TransactOpts, _protocolFee)
}

// SetProtocolFee is a paid mutator transaction binding the contract method 0x787dce3d.
//
// Solidity: function setProtocolFee(uint256 _protocolFee) returns()
func (_License *LicenseTransactorSession) SetProtocolFee(_protocolFee *big.Int) (*types.Transaction, error) {
	return _License.Contract.SetProtocolFee(&_License.TransactOpts, _protocolFee)
}

// SetRegistry is a paid mutator transaction binding the contract method 0xa91ee0dc.
//
// Solidity: function setRegistry(address _registry) returns()
func (_License *LicenseTransactor) SetRegistry(opts *bind.TransactOpts, _registry common.Address) (*types.Transaction, error) {
	return _License.contract.Transact(opts, "setRegistry", _registry)
}

// SetRegistry is a paid mutator transaction binding the contract method 0xa91ee0dc.
//
// Solidity: function setRegistry(address _registry) returns()
func (_License *LicenseSession) SetRegistry(_registry common.Address) (*types.Transaction, error) {
	return _License.Contract.SetRegistry(&_License.TransactOpts, _registry)
}

// SetRegistry is a paid mutator transaction binding the contract method 0xa91ee0dc.
//
// Solidity: function setRegistry(address _registry) returns()
func (_License *LicenseTransactorSession) SetRegistry(_registry common.Address) (*types.Transaction, error) {
	return _License.Contract.SetRegistry(&_License.TransactOpts, _registry)
}

// SetRoyalty is a paid mutator transaction binding the contract method 0x7db3c828.
//
// Solidity: function setRoyalty(uint256 _projectID, address _recipient, uint256 _amount) returns()
func (_License *LicenseTransactor) SetRoyalty(opts *bind.TransactOpts, _projectID *big.Int, _recipient common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _License.contract.Transact(opts, "setRoyalty", _projectID, _recipient, _amount)
}

// SetRoyalty is a paid mutator transaction binding the contract method 0x7db3c828.
//
// Solidity: function setRoyalty(uint256 _projectID, address _recipient, uint256 _amount) returns()
func (_License *LicenseSession) SetRoyalty(_projectID *big.Int, _recipient common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _License.Contract.SetRoyalty(&_License.TransactOpts, _projectID, _recipient, _amount)
}

// SetRoyalty is a paid mutator transaction binding the contract method 0x7db3c828.
//
// Solidity: function setRoyalty(uint256 _projectID, address _recipient, uint256 _amount) returns()
func (_License *LicenseTransactorSession) SetRoyalty(_projectID *big.Int, _recipient common.Address, _amount *big.Int) (*types.Transaction, error) {
	return _License.Contract.SetRoyalty(&_License.TransactOpts, _projectID, _recipient, _amount)
}

// Withdraw is a paid mutator transaction binding the contract method 0x00f714ce.
//
// Solidity: function withdraw(uint256 _projectID, address _recipient) returns()
func (_License *LicenseTransactor) Withdraw(opts *bind.TransactOpts, _projectID *big.Int, _recipient common.Address) (*types.Transaction, error) {
	return _License.contract.Transact(opts, "withdraw", _projectID, _recipient)
}

// Withdraw is a paid mutator transaction binding the contract method 0x00f714ce.
//
// Solidity: function withdraw(uint256 _projectID, address _recipient) returns()
func (_License *LicenseSession) Withdraw(_projectID *big.Int, _recipient common.Address) (*types.Transaction, error) {
	return _License.Contract.Withdraw(&_License.TransactOpts, _projectID, _recipient)
}

// Withdraw is a paid mutator transaction binding the contract method 0x00f714ce.
//
// Solidity: function withdraw(uint256 _projectID, address _recipient) returns()
func (_License *LicenseTransactorSession) Withdraw(_projectID *big.Int, _recipient common.Address) (*types.Transaction, error) {
	return _License.Contract.Withdraw(&_License.TransactOpts, _projectID, _recipient)
}

// Withdraw0 is a paid mutator transaction binding the contract method 0x69328dec.
//
// Solidity: function withdraw(address _token, uint256 _projectID, address _recipient) returns()
func (_License *LicenseTransactor) Withdraw0(opts *bind.TransactOpts, _token common.Address, _projectID *big.Int, _recipient common.Address) (*types.Transaction, error) {
	return _License.contract.Transact(opts, "withdraw0", _token, _projectID, _recipient)
}

// Withdraw0 is a paid mutator transaction binding the contract method 0x69328dec.
//
// Solidity: function withdraw(address _token, uint256 _projectID, address _recipient) returns()
func (_License *LicenseSession) Withdraw0(_token common.Address, _projectID *big.Int, _recipient common.Address) (*types.Transaction, error) {
	return _License.Contract.Withdraw0(&_License.TransactOpts, _token, _projectID, _recipient)
}

// Withdraw0 is a paid mutator transaction binding the contract method 0x69328dec.
//
// Solidity: function withdraw(address _token, uint256 _projectID, address _recipient) returns()
func (_License *LicenseTransactorSession) Withdraw0(_token common.Address, _projectID *big.Int, _recipient common.Address) (*types.Transaction, error) {
	return _License.Contract.Withdraw0(&_License.TransactOpts, _token, _projectID, _recipient)
}

// LicenseApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the License contract.
type LicenseApprovalForAllIterator struct {
	Event *LicenseApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LicenseApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LicenseApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LicenseApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LicenseApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LicenseApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LicenseApprovalForAll represents a ApprovalForAll event raised by the License contract.
type LicenseApprovalForAll struct {
	Account  common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed account, address indexed operator, bool approved)
func (_License *LicenseFilterer) FilterApprovalForAll(opts *bind.FilterOpts, account []common.Address, operator []common.Address) (*LicenseApprovalForAllIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _License.contract.FilterLogs(opts, "ApprovalForAll", accountRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &LicenseApprovalForAllIterator{contract: _License.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed account, address indexed operator, bool approved)
func (_License *LicenseFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *LicenseApprovalForAll, account []common.Address, operator []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _License.contract.WatchLogs(opts, "ApprovalForAll", accountRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LicenseApprovalForAll)
				if err := _License.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed account, address indexed operator, bool approved)
func (_License *LicenseFilterer) ParseApprovalForAll(log types.Log) (*LicenseApprovalForAll, error) {
	event := new(LicenseApprovalForAll)
	if err := _License.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LicenseBalanceWithdrawnIterator is returned from FilterBalanceWithdrawn and is used to iterate over the raw logs and unpacked data for BalanceWithdrawn events raised by the License contract.
type LicenseBalanceWithdrawnIterator struct {
	Event *LicenseBalanceWithdrawn // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LicenseBalanceWithdrawnIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LicenseBalanceWithdrawn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LicenseBalanceWithdrawn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LicenseBalanceWithdrawnIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LicenseBalanceWithdrawnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LicenseBalanceWithdrawn represents a BalanceWithdrawn event raised by the License contract.
type LicenseBalanceWithdrawn struct {
	ProjectID *big.Int
	Token     common.Address
	Balance   *big.Int
	Recipient common.Address
	Sender    common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterBalanceWithdrawn is a free log retrieval operation binding the contract event 0x04751620a1532cb5f45ff525275245b0dc69fc2e5acdf0c8154636daabfcce2f.
//
// Solidity: event BalanceWithdrawn(uint256 _projectID, address _token, uint256 _balance, address _recipient, address _sender)
func (_License *LicenseFilterer) FilterBalanceWithdrawn(opts *bind.FilterOpts) (*LicenseBalanceWithdrawnIterator, error) {

	logs, sub, err := _License.contract.FilterLogs(opts, "BalanceWithdrawn")
	if err != nil {
		return nil, err
	}
	return &LicenseBalanceWithdrawnIterator{contract: _License.contract, event: "BalanceWithdrawn", logs: logs, sub: sub}, nil
}

// WatchBalanceWithdrawn is a free log subscription operation binding the contract event 0x04751620a1532cb5f45ff525275245b0dc69fc2e5acdf0c8154636daabfcce2f.
//
// Solidity: event BalanceWithdrawn(uint256 _projectID, address _token, uint256 _balance, address _recipient, address _sender)
func (_License *LicenseFilterer) WatchBalanceWithdrawn(opts *bind.WatchOpts, sink chan<- *LicenseBalanceWithdrawn) (event.Subscription, error) {

	logs, sub, err := _License.contract.WatchLogs(opts, "BalanceWithdrawn")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LicenseBalanceWithdrawn)
				if err := _License.contract.UnpackLog(event, "BalanceWithdrawn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBalanceWithdrawn is a log parse operation binding the contract event 0x04751620a1532cb5f45ff525275245b0dc69fc2e5acdf0c8154636daabfcce2f.
//
// Solidity: event BalanceWithdrawn(uint256 _projectID, address _token, uint256 _balance, address _recipient, address _sender)
func (_License *LicenseFilterer) ParseBalanceWithdrawn(log types.Log) (*LicenseBalanceWithdrawn, error) {
	event := new(LicenseBalanceWithdrawn)
	if err := _License.contract.UnpackLog(event, "BalanceWithdrawn", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LicenseLimitChangedIterator is returned from FilterLimitChanged and is used to iterate over the raw logs and unpacked data for LimitChanged events raised by the License contract.
type LicenseLimitChangedIterator struct {
	Event *LicenseLimitChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LicenseLimitChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LicenseLimitChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LicenseLimitChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LicenseLimitChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LicenseLimitChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LicenseLimitChanged represents a LimitChanged event raised by the License contract.
type LicenseLimitChanged struct {
	ProjectID *big.Int
	Limit     *big.Int
	Sender    common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterLimitChanged is a free log retrieval operation binding the contract event 0xe03d1af674568db43fd12359b0c2caba687beab17076dad808305cbda27941e0.
//
// Solidity: event LimitChanged(uint256 _projectID, uint256 _limit, address _sender)
func (_License *LicenseFilterer) FilterLimitChanged(opts *bind.FilterOpts) (*LicenseLimitChangedIterator, error) {

	logs, sub, err := _License.contract.FilterLogs(opts, "LimitChanged")
	if err != nil {
		return nil, err
	}
	return &LicenseLimitChangedIterator{contract: _License.contract, event: "LimitChanged", logs: logs, sub: sub}, nil
}

// WatchLimitChanged is a free log subscription operation binding the contract event 0xe03d1af674568db43fd12359b0c2caba687beab17076dad808305cbda27941e0.
//
// Solidity: event LimitChanged(uint256 _projectID, uint256 _limit, address _sender)
func (_License *LicenseFilterer) WatchLimitChanged(opts *bind.WatchOpts, sink chan<- *LicenseLimitChanged) (event.Subscription, error) {

	logs, sub, err := _License.contract.WatchLogs(opts, "LimitChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LicenseLimitChanged)
				if err := _License.contract.UnpackLog(event, "LimitChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseLimitChanged is a log parse operation binding the contract event 0xe03d1af674568db43fd12359b0c2caba687beab17076dad808305cbda27941e0.
//
// Solidity: event LimitChanged(uint256 _projectID, uint256 _limit, address _sender)
func (_License *LicenseFilterer) ParseLimitChanged(log types.Log) (*LicenseLimitChanged, error) {
	event := new(LicenseLimitChanged)
	if err := _License.contract.UnpackLog(event, "LimitChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LicensePriceChangedIterator is returned from FilterPriceChanged and is used to iterate over the raw logs and unpacked data for PriceChanged events raised by the License contract.
type LicensePriceChangedIterator struct {
	Event *LicensePriceChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LicensePriceChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LicensePriceChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LicensePriceChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LicensePriceChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LicensePriceChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LicensePriceChanged represents a PriceChanged event raised by the License contract.
type LicensePriceChanged struct {
	ProjectID *big.Int
	Token     common.Address
	Price     *big.Int
	Sender    common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterPriceChanged is a free log retrieval operation binding the contract event 0x177084a34b04a8e9e384feae8c2fa4ac26b3f4b24a18880900f596fac0847558.
//
// Solidity: event PriceChanged(uint256 _projectID, address _token, uint256 _price, address _sender)
func (_License *LicenseFilterer) FilterPriceChanged(opts *bind.FilterOpts) (*LicensePriceChangedIterator, error) {

	logs, sub, err := _License.contract.FilterLogs(opts, "PriceChanged")
	if err != nil {
		return nil, err
	}
	return &LicensePriceChangedIterator{contract: _License.contract, event: "PriceChanged", logs: logs, sub: sub}, nil
}

// WatchPriceChanged is a free log subscription operation binding the contract event 0x177084a34b04a8e9e384feae8c2fa4ac26b3f4b24a18880900f596fac0847558.
//
// Solidity: event PriceChanged(uint256 _projectID, address _token, uint256 _price, address _sender)
func (_License *LicenseFilterer) WatchPriceChanged(opts *bind.WatchOpts, sink chan<- *LicensePriceChanged) (event.Subscription, error) {

	logs, sub, err := _License.contract.WatchLogs(opts, "PriceChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LicensePriceChanged)
				if err := _License.contract.UnpackLog(event, "PriceChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePriceChanged is a log parse operation binding the contract event 0x177084a34b04a8e9e384feae8c2fa4ac26b3f4b24a18880900f596fac0847558.
//
// Solidity: event PriceChanged(uint256 _projectID, address _token, uint256 _price, address _sender)
func (_License *LicenseFilterer) ParsePriceChanged(log types.Log) (*LicensePriceChanged, error) {
	event := new(LicensePriceChanged)
	if err := _License.contract.UnpackLog(event, "PriceChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LicenseProductPurchasedIterator is returned from FilterProductPurchased and is used to iterate over the raw logs and unpacked data for ProductPurchased events raised by the License contract.
type LicenseProductPurchasedIterator struct {
	Event *LicenseProductPurchased // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LicenseProductPurchasedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LicenseProductPurchased)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LicenseProductPurchased)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LicenseProductPurchasedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LicenseProductPurchasedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LicenseProductPurchased represents a ProductPurchased event raised by the License contract.
type LicenseProductPurchased struct {
	ProjectID *big.Int
	Token     common.Address
	Price     *big.Int
	Recipient common.Address
	Sender    common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterProductPurchased is a free log retrieval operation binding the contract event 0x29db119c05c194379be903dc7e60b630ed6aea31a542f49193b142f61b2629f1.
//
// Solidity: event ProductPurchased(uint256 _projectID, address _token, uint256 _price, address _recipient, address _sender)
func (_License *LicenseFilterer) FilterProductPurchased(opts *bind.FilterOpts) (*LicenseProductPurchasedIterator, error) {

	logs, sub, err := _License.contract.FilterLogs(opts, "ProductPurchased")
	if err != nil {
		return nil, err
	}
	return &LicenseProductPurchasedIterator{contract: _License.contract, event: "ProductPurchased", logs: logs, sub: sub}, nil
}

// WatchProductPurchased is a free log subscription operation binding the contract event 0x29db119c05c194379be903dc7e60b630ed6aea31a542f49193b142f61b2629f1.
//
// Solidity: event ProductPurchased(uint256 _projectID, address _token, uint256 _price, address _recipient, address _sender)
func (_License *LicenseFilterer) WatchProductPurchased(opts *bind.WatchOpts, sink chan<- *LicenseProductPurchased) (event.Subscription, error) {

	logs, sub, err := _License.contract.WatchLogs(opts, "ProductPurchased")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LicenseProductPurchased)
				if err := _License.contract.UnpackLog(event, "ProductPurchased", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseProductPurchased is a log parse operation binding the contract event 0x29db119c05c194379be903dc7e60b630ed6aea31a542f49193b142f61b2629f1.
//
// Solidity: event ProductPurchased(uint256 _projectID, address _token, uint256 _price, address _recipient, address _sender)
func (_License *LicenseFilterer) ParseProductPurchased(log types.Log) (*LicenseProductPurchased, error) {
	event := new(LicenseProductPurchased)
	if err := _License.contract.UnpackLog(event, "ProductPurchased", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LicenseRoyaltyChangedIterator is returned from FilterRoyaltyChanged and is used to iterate over the raw logs and unpacked data for RoyaltyChanged events raised by the License contract.
type LicenseRoyaltyChangedIterator struct {
	Event *LicenseRoyaltyChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LicenseRoyaltyChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LicenseRoyaltyChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LicenseRoyaltyChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LicenseRoyaltyChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LicenseRoyaltyChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LicenseRoyaltyChanged represents a RoyaltyChanged event raised by the License contract.
type LicenseRoyaltyChanged struct {
	ProjectID *big.Int
	Recipient common.Address
	Amount    *big.Int
	Sender    common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterRoyaltyChanged is a free log retrieval operation binding the contract event 0xe7519564d05625627d3dbe586a6948df3f9c38bbd34841c59ff3a2f1be5b5e06.
//
// Solidity: event RoyaltyChanged(uint256 _projectID, address _recipient, uint256 _amount, address _sender)
func (_License *LicenseFilterer) FilterRoyaltyChanged(opts *bind.FilterOpts) (*LicenseRoyaltyChangedIterator, error) {

	logs, sub, err := _License.contract.FilterLogs(opts, "RoyaltyChanged")
	if err != nil {
		return nil, err
	}
	return &LicenseRoyaltyChangedIterator{contract: _License.contract, event: "RoyaltyChanged", logs: logs, sub: sub}, nil
}

// WatchRoyaltyChanged is a free log subscription operation binding the contract event 0xe7519564d05625627d3dbe586a6948df3f9c38bbd34841c59ff3a2f1be5b5e06.
//
// Solidity: event RoyaltyChanged(uint256 _projectID, address _recipient, uint256 _amount, address _sender)
func (_License *LicenseFilterer) WatchRoyaltyChanged(opts *bind.WatchOpts, sink chan<- *LicenseRoyaltyChanged) (event.Subscription, error) {

	logs, sub, err := _License.contract.WatchLogs(opts, "RoyaltyChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LicenseRoyaltyChanged)
				if err := _License.contract.UnpackLog(event, "RoyaltyChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoyaltyChanged is a log parse operation binding the contract event 0xe7519564d05625627d3dbe586a6948df3f9c38bbd34841c59ff3a2f1be5b5e06.
//
// Solidity: event RoyaltyChanged(uint256 _projectID, address _recipient, uint256 _amount, address _sender)
func (_License *LicenseFilterer) ParseRoyaltyChanged(log types.Log) (*LicenseRoyaltyChanged, error) {
	event := new(LicenseRoyaltyChanged)
	if err := _License.contract.UnpackLog(event, "RoyaltyChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LicenseTransferBatchIterator is returned from FilterTransferBatch and is used to iterate over the raw logs and unpacked data for TransferBatch events raised by the License contract.
type LicenseTransferBatchIterator struct {
	Event *LicenseTransferBatch // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LicenseTransferBatchIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LicenseTransferBatch)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LicenseTransferBatch)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LicenseTransferBatchIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LicenseTransferBatchIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LicenseTransferBatch represents a TransferBatch event raised by the License contract.
type LicenseTransferBatch struct {
	Operator common.Address
	From     common.Address
	To       common.Address
	Ids      []*big.Int
	Values   []*big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTransferBatch is a free log retrieval operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values)
func (_License *LicenseFilterer) FilterTransferBatch(opts *bind.FilterOpts, operator []common.Address, from []common.Address, to []common.Address) (*LicenseTransferBatchIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _License.contract.FilterLogs(opts, "TransferBatch", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &LicenseTransferBatchIterator{contract: _License.contract, event: "TransferBatch", logs: logs, sub: sub}, nil
}

// WatchTransferBatch is a free log subscription operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values)
func (_License *LicenseFilterer) WatchTransferBatch(opts *bind.WatchOpts, sink chan<- *LicenseTransferBatch, operator []common.Address, from []common.Address, to []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _License.contract.WatchLogs(opts, "TransferBatch", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LicenseTransferBatch)
				if err := _License.contract.UnpackLog(event, "TransferBatch", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransferBatch is a log parse operation binding the contract event 0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb.
//
// Solidity: event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values)
func (_License *LicenseFilterer) ParseTransferBatch(log types.Log) (*LicenseTransferBatch, error) {
	event := new(LicenseTransferBatch)
	if err := _License.contract.UnpackLog(event, "TransferBatch", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LicenseTransferSingleIterator is returned from FilterTransferSingle and is used to iterate over the raw logs and unpacked data for TransferSingle events raised by the License contract.
type LicenseTransferSingleIterator struct {
	Event *LicenseTransferSingle // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LicenseTransferSingleIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LicenseTransferSingle)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LicenseTransferSingle)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LicenseTransferSingleIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LicenseTransferSingleIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LicenseTransferSingle represents a TransferSingle event raised by the License contract.
type LicenseTransferSingle struct {
	Operator common.Address
	From     common.Address
	To       common.Address
	Id       *big.Int
	Value    *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterTransferSingle is a free log retrieval operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value)
func (_License *LicenseFilterer) FilterTransferSingle(opts *bind.FilterOpts, operator []common.Address, from []common.Address, to []common.Address) (*LicenseTransferSingleIterator, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _License.contract.FilterLogs(opts, "TransferSingle", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &LicenseTransferSingleIterator{contract: _License.contract, event: "TransferSingle", logs: logs, sub: sub}, nil
}

// WatchTransferSingle is a free log subscription operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value)
func (_License *LicenseFilterer) WatchTransferSingle(opts *bind.WatchOpts, sink chan<- *LicenseTransferSingle, operator []common.Address, from []common.Address, to []common.Address) (event.Subscription, error) {

	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}
	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _License.contract.WatchLogs(opts, "TransferSingle", operatorRule, fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LicenseTransferSingle)
				if err := _License.contract.UnpackLog(event, "TransferSingle", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransferSingle is a log parse operation binding the contract event 0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62.
//
// Solidity: event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value)
func (_License *LicenseFilterer) ParseTransferSingle(log types.Log) (*LicenseTransferSingle, error) {
	event := new(LicenseTransferSingle)
	if err := _License.contract.UnpackLog(event, "TransferSingle", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// LicenseURIIterator is returned from FilterURI and is used to iterate over the raw logs and unpacked data for URI events raised by the License contract.
type LicenseURIIterator struct {
	Event *LicenseURI // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *LicenseURIIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(LicenseURI)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(LicenseURI)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *LicenseURIIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *LicenseURIIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// LicenseURI represents a URI event raised by the License contract.
type LicenseURI struct {
	Value string
	Id    *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterURI is a free log retrieval operation binding the contract event 0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b.
//
// Solidity: event URI(string value, uint256 indexed id)
func (_License *LicenseFilterer) FilterURI(opts *bind.FilterOpts, id []*big.Int) (*LicenseURIIterator, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _License.contract.FilterLogs(opts, "URI", idRule)
	if err != nil {
		return nil, err
	}
	return &LicenseURIIterator{contract: _License.contract, event: "URI", logs: logs, sub: sub}, nil
}

// WatchURI is a free log subscription operation binding the contract event 0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b.
//
// Solidity: event URI(string value, uint256 indexed id)
func (_License *LicenseFilterer) WatchURI(opts *bind.WatchOpts, sink chan<- *LicenseURI, id []*big.Int) (event.Subscription, error) {

	var idRule []interface{}
	for _, idItem := range id {
		idRule = append(idRule, idItem)
	}

	logs, sub, err := _License.contract.WatchLogs(opts, "URI", idRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(LicenseURI)
				if err := _License.contract.UnpackLog(event, "URI", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseURI is a log parse operation binding the contract event 0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b.
//
// Solidity: event URI(string value, uint256 indexed id)
func (_License *LicenseFilterer) ParseURI(log types.Log) (*LicenseURI, error) {
	event := new(LicenseURI)
	if err := _License.contract.UnpackLog(event, "URI", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
